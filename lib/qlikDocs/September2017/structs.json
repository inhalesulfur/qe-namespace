{
    "AlfaNumString": {
        "qString": {
            "desc": "Calculated value.",
            "instance": "String",
            "type": "primitive"
        },
        "qIsNum": {
            "desc": "Is set to true if the value is a numeric.",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "AlternateStateData": {
        "qStateName": {
            "desc": "Name of the alternate state.\n\n\nDefault is current selections: $\n",
            "instance": "String",
            "type": "primitive"
        },
        "qFieldItems": {
            "desc": "List of the selections",
            "instance": "BookmarkFieldItem",
            "type": "array"
        }
    },
    "AppEntry": {
        "qID": {
            "desc": "Identifier of the app.",
            "instance": "String",
            "type": "primitive"
        },
        "qTitle": {
            "desc": "Title of the app.",
            "instance": "String",
            "type": "primitive"
        },
        "qPath": {
            "desc": "Path of the app.",
            "instance": "String",
            "type": "primitive"
        },
        "qLastReloadTime": {
            "desc": "Last reload time of the app.",
            "instance": "String",
            "type": "primitive"
        },
        "qReadOnly": {
            "desc": "Is set to true if the app is read-only.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qMeta": {
            "desc": "Meta data.",
            "instance": "NxMeta",
            "type": "object"
        },
        "qThumbnail": {
            "desc": "App thumbnail.",
            "instance": "StaticContentUrl",
            "type": "object"
        }
    },
    "AssociationScore": {
        "qFieldPairName": {
            "desc": "Pair of fields.\n&lt;FieldName1&gt; / &lt;FieldName2&gt;\nWhere:\n&lt;FieldName1&gt; is a field in the table 1 (defined in qTable1)\n &lt;FieldName2&gt; is a field in the table 2 (defined in qTable2)\nIf the field is a synthetic key, the name of the field is preceded by [Synthetic key]:.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qScoreSummary": {
            "desc": "Flag used to interpret calculated scores.\nOne of the following values or sum of values that apply:\n\n0: The cardinal ratio cannot be zero but the symbol score and the row score can be zero.\n-1: The fields do not have the same type.\n-2: The number of rows of the field FieldName1 is zero.\n-4: The number of distinct values of thefield FieldName1 is zero.\n-8: The number of rows of the field FieldName2 is zero.\n-16: The number of distinct values of thefield FieldName2 is zero.\n\nExample:\nThe number of rows of the field FieldName1 is zero, and the number of distinct values of the field FieldName2 is zero, then qScoreSummary is -18.\n",
            "values": {
                "0": "The cardinal ratio cannot be zero but the symbol score and the row score can be zero.",
                "-1": "The fields do not have the same type.",
                "-2": "The number of rows of the field FieldName1 is zero.",
                "-4": "The number of distinct values of the  field FieldName1 is zero.",
                "-8": "The number of rows of the field FieldName2 is zero.",
                "-16": "The number of distinct values of the  field FieldName2 is zero."
            },
            "type": "primitive"
        },
        "qField1Scores": {
            "desc": "Association information about the field FieldName1 defined in qFieldPairName.",
            "instance": "FieldScores",
            "type": "object"
        },
        "qField2Scores": {
            "desc": "Association information about the field FieldName2 defined in qFieldPairName.",
            "instance": "FieldScores",
            "type": "object"
        }
    },
    "BNFDef": {
        "qBnf": {
            "desc": "Array of token references that all together build up the definition of the current token.\nGenerally, if the array is not empty, the definition is a BNF rule (qIsBnfRule is set to true). However, someBNF&nbsp;rules do have an empty array (qIsBnfRule is set to true, but qBnf is empty).\n",
            "instance": "Integer",
            "type": "array"
        },
        "qNbr": {
            "desc": "Number of the current token definition.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qPNbr": {
            "desc": "Number of the parent rule definition.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qHelpId": {
            "desc": "Reference identifier to a function described in the documentation. The identifier is stored in the definition of the token containing the function name.\nIs not used in Qlik Sense.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qName": {
            "desc": "Token name.\nOne of:\n\na rule name\nan identifier\na literal value\n\n",
            "values": {
                "a rule name": "",
                "an identifier": "",
                "a literal value": ""
            },
            "type": "primitive"
        },
        "qStr": {
            "desc": "Literal string of the token.\nExamples: 'Round' and '('.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qIsBnfRule": {
            "desc": "If set to true,a list of related rule tokens is assigned to qBnf .\nThis parameter is optional. The default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qScriptStatement": {
            "desc": "If set to true,the definition specifies a script statement.\nThis parameter is optional. The default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qControlStatement": {
            "desc": "If set to true,the definition specifies a control statement.\nThis parameter is optional. The default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qBnfLiteral": {
            "desc": "If set to true,the definition specifies a literal token.\nThis parameter is optional. The default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qQvFunc": {
            "desc": "If set to true,the definition is related to a Qlik Sense function. It cannot be an aggregation function.\nThis parameter is optional. The default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qAggrFunc": {
            "desc": "If set to true,the definition is related to an aggregation function.\nThis parameter is optional. The default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qFG": {
            "desc": "Group of the function.",
            "values": {
                "ALL": "FUNC_GROUP_ALL",
                "U": "FUNC_GROUP_UNKNOWN",
                "NONE": "FUNC_GROUP_NONE",
                "AGGR": "FUNC_GROUP_AGGR",
                "NUM": "FUNC_GROUP_NUMERIC",
                "RNG": "FUNC_GROUP_RANGE",
                "EXP": "FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC",
                "TRIG": "FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC",
                "FIN": "FUNC_GROUP_FINANCIAL",
                "MATH": "FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE",
                "COUNT": "FUNC_GROUP_COUNTER",
                "STR": "FUNC_GROUP_STRING",
                "MAPP": "FUNC_GROUP_MAPPING",
                "RCRD": "FUNC_GROUP_INTER_RECORD",
                "CND": "FUNC_GROUP_CONDITIONAL",
                "LOG": "FUNC_GROUP_LOGICAL",
                "NULL": "FUNC_GROUP_NULL",
                "SYS": "FUNC_GROUP_SYSTEM",
                "FILE": "FUNC_GROUP_FILE",
                "TBL": "FUNC_GROUP_TABLE",
                "DATE": "FUNC_GROUP_DATE_AND_TIME",
                "NUMI": "FUNC_GROUP_NUMBER_INTERPRET",
                "FRMT": "FUNC_GROUP_FORMATTING",
                "CLR": "FUNC_GROUP_COLOR",
                "RNK": "FUNC_GROUP_RANKING",
                "GEO": "FUNC_GROUP_GEO",
                "EXT": "FUNC_GROUP_EXTERNAL"
            },
            "type": "primitive"
        },
        "qFieldFlag": {
            "desc": "If set to true,the definition is related to a field.\nThis parameter is optional. The default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qMT": {
            "desc": "Type of the data.",
            "values": {
                "N": "NOT_META",
                "D": "META_DOC_NAME",
                "R": "META_RET_TYPE"
            },
            "type": "primitive"
        },
        "qDepr": {
            "desc": "Indicates whether a script statement, a chart or a script function is deprecated (not recommended for use).\nIf set to true,the script statement or thefunction is not recommended for use in Qlik Sense. \nThis parameter is optional. The default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "BookmarkListDef": {
        "qType": {
            "desc": "Type of the list",
            "instance": "String",
            "type": "primitive"
        },
        "qData": {
            "desc": "Data\n",
            "instance": "JSON",
            "type": "primitive"
        }
    },
    "BookmarkVariableItem": {
        "qName": {
            "desc": "Name of the variable.",
            "instance": "String",
            "type": "primitive"
        },
        "qValue": {
            "desc": "Value of the variable.",
            "instance": "FieldValue",
            "type": "object"
        }
    },
    "BookmarkFieldItem": {
        "qDef": {
            "desc": "Name and type of the field",
            "instance": "FieldDefEx",
            "type": "object"
        },
        "qLocked": {
            "desc": "Indicates if the field is locked.\nDefault is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qSelectInfo": {
            "desc": "Information on the selections criteria",
            "instance": {},
            "type": "primitive"
        },
        "qValues": {
            "desc": "List of the selected values\nEither the list of selected values or the list of excluded values is displayed.\n",
            "instance": "FieldValue",
            "type": "array"
        },
        "qExcludedValues": {
            "desc": "List of excluded values.\nEither the list of selected values or the list of excluded values is displayed.\n",
            "instance": "FieldValue",
            "type": "array"
        },
        "qAndMode": {
            "desc": "If set to true, selections within a list object are made in AND mode; If you have a list object that lists all customers, by selecting Customer 1 and Customer 2 while in and-mode, all records that are associated with Customer 1 and Customer 2 are selected.\nThe default value is false; selections within a list object are made in OR mode.If you have a list object that lists all customers, by selecting Customer 1 and Customer 2 while in or-mode, all records that are associated with either Customer 1 or Customer 2 are selected.\nThis parameter is not returned if set to false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qOneAndOnlyOne": {
            "desc": "If set to true, the field has always one selection (not 0 and not more than 1). If another value is selected, the previous one is unselected.\nThe default value is false. This parameter is not returned if set to false.\n",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "AppObjectListDef": {
        "qType": {
            "desc": "Type of the app list.",
            "instance": "String",
            "type": "primitive"
        },
        "qData": {
            "desc": "Data that you want to include in the app list definition.\nYou need to enter the paths to the information you want to retrieve.\n",
            "instance": "JSON",
            "type": "primitive"
        }
    },
    "BookmarkList": {
        "qItems": {
            "desc": "Information about the list of bookmarks",
            "instance": "NxContainerEntry",
            "type": "array"
        }
    },
    "CalendarStrings": {
        "qDayNames": {
            "desc": "List of short day names.",
            "instance": "String",
            "type": "array"
        },
        "qMonthNames": {
            "desc": "List of short month names.",
            "instance": "String",
            "type": "array"
        },
        "qLongDayNames": {
            "desc": "List of long day names.",
            "instance": "String",
            "type": "array"
        },
        "qLongMonthNames": {
            "desc": "List of long month names.",
            "instance": "String",
            "type": "array"
        }
    },
    "CharRange": {
        "qCharPos": {
            "desc": "Position of the first search occurrence",
            "instance": "Integer",
            "type": "primitive"
        },
        "qCharCount": {
            "desc": "Number of occurrences found",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "ChildList": {
        "qItems": {
            "desc": "Information about the items in the app object",
            "instance": "NxContainerEntry",
            "type": "array"
        }
    },
    "ChildListDef": {
        "qData": {
            "desc": "Data that you want to include in the child list definition.\nYou need to enter the paths to the information you want to retrieve.\n",
            "instance": "JSON",
            "type": "primitive"
        }
    },
    "CodePage": {
        "qNumber": {
            "desc": "Number of the code page",
            "instance": "Integer",
            "type": "primitive"
        },
        "qName": {
            "desc": "Name of the code page",
            "instance": "String",
            "type": "primitive"
        },
        "qDescription": {
            "desc": "Description of the code page",
            "instance": "String",
            "type": "primitive"
        }
    },
    "Connection": {
        "qId": {
            "desc": "Identifier of the connection.\nIs generated by the engine and is unique.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qName": {
            "desc": "Name of the connection.\nThis parameter is mandatory and must be set when creating or modifying a connection.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qConnectionString": {
            "desc": "One of:\n\nODBC CONNECT&nbsp;TO [&lt;provider name&gt;]\nOLEDB CONNECT&nbsp;TO [&lt;provider name&gt;]\nCUSTOM&nbsp;CONNECT TO [&lt;provider name&gt;]\n\"&lt;local absolute or relative path,UNC path &gt;\"\n\"&lt;URL&gt;\"\n\nConnection string.\nThis parameter is mandatory and must be set when creating or modifying a connection.\n",
            "values": {
                "ODBC CONNECT&nbsp;TO [&lt;provider name&gt;]": "",
                "OLEDB CONNECT&nbsp;TO [&lt;provider name&gt;]": "",
                "CUSTOM&nbsp;CONNECT TO [&lt;provider name&gt;]": "",
                "\"&lt;local absolute or relative path,UNC path &gt;\"": "",
                "\"&lt;URL&gt;\"": ""
            },
            "type": "primitive"
        },
        "qType": {
            "desc": "One of:\n\nODBC\nOLEDB\n&lt;Name of the custom connection file&gt;\nfolder\ninternet\n\nType of the connection.\nThis parameter is mandatory and must be set when creating or modifying a connection.\nFor ODBC, OLEDB and custom connections, the engine checks that the connection type matches the connection string.\nThe type is not case sensitive.\n",
            "values": {
                "ODBC": "",
                "OLEDB": "",
                "&lt;Name of the custom connection file&gt;": "",
                "folder": "",
                "internet": ""
            },
            "type": "primitive"
        },
        "qUserName": {
            "desc": "Name of the user who creates the connection.\nThis parameter is optional; it is only used for OLEDB, ODBC and CUSTOM connections.\nA call to GetConnection method does not return the user name.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qPassword": {
            "desc": "Password of the user who creates the connection.\nThis parameter is optional; it is only used for OLEDB, ODBC and CUSTOM connections.\nA call to GetConnection method does not return the password.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qModifiedDate": {
            "desc": "Is generated by the engine.\nCreation date of the connection or last modification date of the connection.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qMeta": {
            "desc": "Information about the connection.\n",
            "instance": "NxMeta",
            "type": "object"
        },
        "qLogOn": {
            "desc": " Select which user credentials to use to connect to the source.\n\nLOG_ON_SERVICE_USER: Disables\nLOG_ON_CURRENT_USER: Enables\n\n",
            "values": {
                "LOG_ON_SERVICE_USER": "",
                "LOG_ON_CURRENT_USER": ""
            },
            "type": "primitive"
        }
    },
    "ContentLibraryList": {
        "qItems": {
            "desc": "Information about the content library.",
            "instance": "ContentLibraryListItem",
            "type": "object"
        }
    },
    "CustomConnector": {
        "qProvider": {
            "desc": "Name of the custom connector file.",
            "instance": "String",
            "type": "primitive"
        },
        "qParent": {
            "desc": "Name of the parent folder that contains the custom connector file.",
            "instance": "String",
            "type": "primitive"
        },
        "qDisplayName": {
            "desc": "Name of the custom connector as displayed in the Qlik interface.",
            "instance": "String",
            "type": "primitive"
        },
        "qMachineMode": {
            "desc": "Mode of the machine (64 or 32 bits).",
            "values": {
                "CONNECT_DEFAULT": "used internally",
                "CONNECT_64": "",
                "CONNECT_32": ""
            },
            "type": "primitive"
        }
    },
    "ContentLibraryListItem": {
        "qName": {
            "desc": "Name of the library.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qAppSpecific": {
            "desc": "Is set to true if the library is specific to the app (not a global content library).",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qMeta": {
            "desc": "Information about publishing and permissions.",
            "instance": "NxMeta",
            "type": "object"
        }
    },
    "Database": {
        "qName": {
            "desc": "Name of the database.",
            "instance": "String",
            "type": "primitive"
        },
        "qIsDefault": {
            "desc": "Is set to true if the database is set by default.",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "DatabaseInfo": {
        "qDBMSName": {
            "desc": "Name of the product accessed by the provider\n",
            "instance": "String",
            "type": "primitive"
        },
        "qDBUsage": {
            "desc": "If set to true, it means that the data source contains some databases.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qOwnerUsage": {
            "desc": "If set to true, it means that the data source contains some owners.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qDBSeparator": {
            "desc": "Character string used after the database name\nExample with separator \".\":\nFROM LinkedTablesData.dbo.Months\nWhere:\n\nLinkedTablesData is the database name\ndbo is the owner name\nMonths is the table name\n\n",
            "instance": "String",
            "type": "primitive"
        },
        "qOwnerSeparator": {
            "desc": "Character string used after the owner name\nExample with separator \".\":\nFROM LinkedTablesData.dbo.Months\nWhere:\n\nLinkedTablesData is the database name\ndbo is the owner name\nMonths is the table name\n\n",
            "instance": "String",
            "type": "primitive"
        },
        "qDBFirst": {
            "desc": "If set to true, it means that the database is displayed first, before the owners and tables.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qQuotePreffix": {
            "desc": "Prefix used with field, database or owner names that contain special characters or keywords.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qQuoteSuffix": {
            "desc": "Suffix used with field, database or owner names that contain special characters or keywords.",
            "instance": "String",
            "type": "primitive"
        },
        "qSpecialChars": {
            "desc": "List of the special characters",
            "instance": "String",
            "type": "primitive"
        },
        "qDefaultDatabase": {
            "desc": "Name of the default database",
            "instance": "String",
            "type": "primitive"
        },
        "qKeywords": {
            "desc": "List of the script keywords",
            "instance": "String",
            "type": "array"
        }
    },
    "DataField": {
        "qName": {
            "desc": "Name of the field.",
            "instance": "String",
            "type": "primitive"
        },
        "qIsKey": {
            "desc": "Is set to true if the field is a primary key.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qOriginalFieldName": {
            "desc": "Is shown for fixed records.\nqOriginalFieldName and qName are identical if no field names are used in the file.\nqOriginalFieldName differs from qName if embedded file names are used in the file.\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "DatabaseOwner": {
        "qName": {
            "desc": "Name of the owner",
            "instance": "String",
            "type": "primitive"
        }
    },
    "DataTable": {
        "qName": {
            "desc": "Name of the table.",
            "instance": "String",
            "type": "primitive"
        },
        "qType": {
            "desc": "Type of the table.\nFor examples: Table, View\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "DataTableEx": {
        "qName": {
            "desc": "Name of the table.",
            "instance": "String",
            "type": "primitive"
        },
        "qFields": {
            "desc": "List of the fields in the table.",
            "instance": "DataField",
            "type": "array"
        },
        "qFormatSpec": {
            "desc": "List of format specification items, within brackets.\nExamples of specification items:\n\n file type\nembedded labels, no labels\ntable is &lt;table name&gt;\n\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "DataRecord": {
        "qValues": {
            "desc": "List of values inside the table.\nThe first values (in result/qPreview/0/qValues) correspond to the field names in the table.\nThe following values (from result/qPreview/1/qValues) are the values of the fields in the table.\n",
            "instance": "String",
            "type": "array"
        }
    },
    "DerivedFieldsInTableData": {
        "qDefinitionName": {
            "desc": "Name of the derived definition.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qTags": {
            "desc": "List of tags.\n",
            "instance": "String",
            "type": "array"
        },
        "qActive": {
            "desc": "Is set to true is the derived field is in use.\n",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "DimensionList": {
        "qItems": {
            "desc": "Information about the list of dimensions",
            "instance": "NxContainerEntry",
            "type": "array"
        }
    },
    "DelimiterInfo": {
        "qName": {
            "desc": "Name of the delimiter.\nExample:\n\"Tab_DELIMITER\"\n",
            "instance": "String",
            "type": "primitive"
        },
        "qScriptCode": {
            "desc": "Representation of the delimiter value that is used in the script.\nExample:\n\"'\\t'\"\n",
            "instance": "String",
            "type": "primitive"
        },
        "qNumber": {
            "desc": "Delimiter character number used by the engine to determine how to separate the values.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qIsMultiple": {
            "desc": "Is set to true if multiple spaces are used to separate the values.",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "DimensionListDef": {
        "qType": {
            "desc": "Type of the list",
            "instance": "String",
            "type": "primitive"
        },
        "qData": {
            "desc": "Data\n",
            "instance": "JSON",
            "type": "primitive"
        }
    },
    "DocListEntry": {
        "qDocName": {
            "desc": "Name of the app.",
            "instance": "String",
            "type": "primitive"
        },
        "qConnectedUsers": {
            "desc": "Not used.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qFileTime": {
            "desc": " Last modified time stamp of the app.\nThis property is used only with Qlik Sense Desktop.\nIt is set to 0 for Qlik Sense Enterprise.\n",
            "instance": "Double",
            "type": "primitive"
        },
        "qFileSize": {
            "desc": "Size of remote app.\nThis property is used only with Qlik Sense Desktop.\nIt is set to 0 for Qlik Sense Enterprise.\n",
            "instance": "Double",
            "type": "primitive"
        },
        "qDocId": {
            "desc": "Identifier of the app.\n\nIn Qlik Sense Desktop, the identifier is the path and name of the app\nIn Qlik Sense Enterprise, the identifier is the app's GUID.\n\n",
            "instance": "String",
            "type": "primitive"
        },
        "qMeta": {
            "desc": "Meta data related to the app.\n",
            "instance": "NxMeta",
            "type": "object"
        },
        "qLastReloadTime": {
            "desc": "Last reload time of the app.",
            "instance": "String",
            "type": "primitive"
        },
        "qReadOnly": {
            "desc": "If set to true,the app is read-only.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qTitle": {
            "desc": "Title of the app.",
            "instance": "String",
            "type": "primitive"
        },
        "qThumbnail": {
            "desc": "Thumbnail of the app.",
            "instance": "StaticContentUrl",
            "type": "object"
        }
    },
    "DriveType": {
        "qDriveType": {
            "desc": "Type of the drive. Can be:\n\nREMOVABLE\nFIXED\nNETWORK\nCD_ROM\nRAM\nUNKNOWN_TYPE\n\nFIXED means physical drive.\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "EditorBreakpoint": {
        "qbufferName": {
            "desc": "Name of the breakpoint.",
            "instance": "String",
            "type": "primitive"
        },
        "qlineIx": {
            "desc": "Line number in the script where the breakpoint is set.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qEnabled": {
            "desc": "If set to true then the breakpoint is enabled (in use).",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "ErrorData": {
        "qErrorString": {
            "desc": "Detailed information about the error message.",
            "instance": "String",
            "type": "primitive"
        },
        "qLineEnd": {
            "desc": "Line termination characters.",
            "instance": "String",
            "type": "primitive"
        },
        "qLine": {
            "desc": "Script statement where the error occurs.",
            "instance": "String",
            "type": "primitive"
        },
        "qErrorDataCode": {
            "desc": "Type of the error messages.",
            "values": {
                "0": "EDC_ERROR",
                "1": "EDC_WARNING",
                "2": "EDC_CIRCULAR_REFERENCE (Warning related to circular references)"
            },
            "type": "primitive"
        }
    },
    "FieldAttributes": {
        "qType": {
            "desc": "Type of the field.\nDefault is U.\n",
            "values": {
                "U": "for UNKNOWN type.",
                "A": "for ASCII; Numeric fields values  contain only standard ASCII characters.",
                "I": "for INTEGER; Numeric fields values are shown as integer numbers.",
                "R": "for REAL; Numeric fields values are shown as real numbers.",
                "F": "for FIX; Numeric fields values are shown as numbers with a fix number of decimals.",
                "M": "for MONEY; Numeric fields values are shown as in the money format.",
                "D": "for DATE; Numeric fields values are shown as dates.",
                "T": "for TIME; Numeric fields values are shown as times.",
                "TS TIMESTAMP; Numeric fields values are shown as time stamps.": "",
                "IV": "for INTERVAL; Numeric fields values are shown as intervals."
            },
            "type": "primitive"
        },
        "qnDec": {
            "desc": "Number of decimals.\nDefault is 10.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qUseThou": {
            "desc": "Defines whether or not a thousands separator must be used.\nDefault is 0.\n",
            "values": {
                "0": "false",
                "1": "true"
            },
            "type": "primitive"
        },
        "qFmt": {
            "desc": "Defines the format pattern that applies to qText.\n Is used in connection to the type of the field (parameter qType).\nFor more information, see Formatting mechanism.\nExample: YYYY-MM-DD for a date\n",
            "instance": "String",
            "type": "primitive"
        },
        "qDec": {
            "desc": "Defines the decimal separator.\nExample: .\n",
            "instance": "String",
            "type": "primitive"
        },
        "qThou": {
            "desc": "Defines the thousand separator (if any).\nIs used if qUseThou is set to 1.\nExample: ,\n",
            "instance": "String",
            "type": "primitive"
        },
        "qSAFEARRAY": {
            "desc": "&nbsp;",
            "instance": "Array",
            "type": "primitive"
        }
    },
    "DriveInfo": {
        "qDrive": {
            "desc": "Value of the drive\nExamples:\n C:\\\\, E:\\\\\n",
            "instance": "String",
            "type": "primitive"
        },
        "qType": {
            "desc": "Type of the drive.\nFixed means physical drive.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qTypeIdentifier": {
            "desc": "Information about the drive type.\n",
            "instance": "DriveType",
            "type": "object"
        },
        "qName": {
            "desc": "Name of the drive.",
            "instance": "String",
            "type": "primitive"
        }
    },
    "AppObjectList": {
        "qItems": {
            "desc": "Information about the list of dimensions",
            "instance": "NxContainerEntry",
            "type": "array"
        }
    },
    "FieldDefEx": {
        "qName": {
            "desc": "Name of the field",
            "instance": "String",
            "type": "primitive"
        },
        "qType": {
            "desc": "Type of data entity",
            "values": {
                "0": "for NOT_PRESENT: the field does not exist",
                "1": "for PRESENT: plain field",
                "2": "for IS_EXPR: calculated dimension"
            },
            "type": "primitive"
        }
    },
    "FieldDescription": {
        "qInternalNumber": {
            "desc": "Internal number of the field.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qName": {
            "desc": "Name of the field.",
            "instance": "String",
            "type": "primitive"
        },
        "qSrcTables": {
            "desc": "List of table names.",
            "instance": "String",
            "type": "array"
        },
        "qIsSystem": {
            "desc": "If set to true, it means that the field is a system field.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qIsHidden": {
            "desc": "If set to true, it means that the field is hidden.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qIsSemantic": {
            "desc": "If set to true, it means that the field is a semantic.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qDistinctOnly": {
            "desc": "If set to true, only distinct field values are shown.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qCardinal": {
            "desc": "Number of distinct field values.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qTotalCount": {
            "desc": "Total number of field values.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qIsLocked": {
            "desc": "If set to true, it means that the field is locked.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qAlwaysOneSelected": {
            "desc": "If set to true, it means that the field has one and only one selection (not 0 and not more than 1).\nIf this property is set to true, the field cannot be cleared anymore and no more selections can be performed in that field.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qAndMode": {
            "desc": "If set to true a logical AND (instead of a logical OR) is used when making selections in a field.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qIsNumeric": {
            "desc": "Is set to true if the value is a numeric.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qComment": {
            "desc": "Field comment.",
            "instance": "String",
            "type": "primitive"
        },
        "qTags": {
            "desc": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII\n",
            "instance": "String",
            "type": "array"
        },
        "qIsDefinitionOnly": {
            "desc": "If set to true, it means that the field is a field on the fly.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "FieldInTableData": {
        "qName": {
            "desc": "Name of the field.",
            "instance": "String",
            "type": "primitive"
        },
        "qOriginalFields": {
            "desc": "Is shown for fixed records.\nqOriginalFieldName and qName are identical if no field names are used in the file.\nqOriginalFieldName differs from qName if embedded file names are used in the file.\n",
            "instance": "String",
            "type": "array"
        },
        "qPresent": {
            "desc": "&nbsp;",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qHasNull": {
            "desc": "This property is set to true if the field contains some Null values.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qHasWild": {
            "desc": "&nbsp;",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qHasDuplicates": {
            "desc": "This property is set to true if the field contains some duplicate values.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qIsSynthetic": {
            "desc": "This property is set to true if the field contains a synthetic key.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qInformationDensity": {
            "desc": "Number of records that have values (i.e. not NULL) in the field as compared to the total\nnumber of records in the table.",
            "instance": "Double",
            "type": "primitive"
        },
        "qnNonNulls": {
            "desc": "Number of values that are non Null.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qnRows": {
            "desc": "Number of rows in the field",
            "instance": "Integer",
            "type": "primitive"
        },
        "qSubsetRatio": {
            "desc": "Number of distinct values in the field (in the current table) as compared to the total\nnumber of distinct values of this field (in all tables).",
            "instance": "Double",
            "type": "primitive"
        },
        "qnTotalDistinctValues": {
            "desc": "Number of distinct values in the field.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qnPresentDistinctValues": {
            "desc": "&nbsp;",
            "instance": "Integer",
            "type": "primitive"
        },
        "qKeyType": {
            "desc": "Tells if the field is a key field.",
            "values": {
                "NOT_KEY": "",
                "ANY_KEY": "",
                "PRIMARY_KEY": "",
                "PERFECT_KEY": ""
            },
            "type": "primitive"
        },
        "qComment": {
            "desc": "Comment related to the field.",
            "instance": "String",
            "type": "primitive"
        },
        "qTags": {
            "desc": "List of tags related to the field.",
            "instance": "String",
            "type": "array"
        },
        "qDerivedFields": {
            "desc": "List of the derived fields.",
            "instance": "DerivedFieldsInTableData",
            "type": "array"
        }
    },
    "FieldList": {
        "qItems": {
            "desc": "Array of items",
            "instance": "NxFieldDescription",
            "type": "array"
        }
    },
    "FieldListDef": {
        "qShowSystem": {
            "desc": "Shows the system tables if set to true.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qShowHidden": {
            "desc": "Shows the hidden fields if set to true.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qShowSemantic": {
            "desc": "Show the semantic fields if set to true.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qShowSrcTables": {
            "desc": "Shows the tables and fields present in the data model viewer if set to true.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qShowDefinitionOnly": {
            "desc": "Shows the fields defined on the fly if set to true.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qShowDerivedFields": {
            "desc": "Shows the fields and derived fields if set to true.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qShowImplicit": {
            "desc": "Shows the Direct Discovery measure fields if set to true.",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "FieldValue": {
        "qText": {
            "desc": "Text related to the field value\nThis parameter is optional.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qIsNumeric": {
            "desc": "Is set to true if the value is a numeric.\nThis parameter is optional. Default is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qNumber": {
            "desc": "Numeric value of the field.\nThis parameter is displayed if qIsNumeric is set to true.\nThis parameter is optional.\n",
            "instance": "Double",
            "type": "primitive"
        }
    },
    "FileDataFormat": {
        "qType": {
            "desc": "Type of the file.\n",
            "instance": {
                "CSV": "Delimited",
                "FIX": "Fixed Record",
                "DIF": "Data Interchange Format",
                "EXCEL_BIFF": "Microsoft Excel (XLS)",
                "EXCEL_OOXML": "Microsoft Excel (XLSX)",
                "HTMLfor HTML": "",
                "QVD": "QVD file",
                "XML": "XML",
                "QVX": "QVX file",
                "JSON": "JSON&nbsp;format",
                "KML": "KML file"
            },
            "type": "primitive"
        },
        "qLabel": {
            "desc": "One of:\n\nembedded labels (field names are present in the file)\nno labels\nexplicit labels (for DIFfiles)\n\n",
            "values": {
                "embedded labels": "field names are present in the file",
                "no labels": "",
                "explicit labels": "for DIFfiles"
            },
            "type": "primitive"
        },
        "qQuote": {
            "desc": "One of:\n\nNone (no quotes)\nMSQ (Modern Style Quoting)\n\nStandard (quotes \" \" or ' ' can be used, but only if they are the first and last non blank characters of a field value.)\n\n\nThis property is used for delimited files.\n",
            "values": {
                "None": "no quotes",
                "MSQ": "Modern Style Quoting",
                "Standard": "quotes \" \" or ' ' can be used, but only if they are the first and last non blank characters of a field value."
            },
            "type": "primitive"
        },
        "qComment": {
            "desc": "String that marks the beginning of the comment line.\nExample: “#” or “//”\nThe engine ignores the commented lines during the data load.\nThis property is only used for delimited files.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qDelimiter": {
            "desc": "Information about the delimiter.\nThis property is used for delimited files.\n",
            "instance": "DelimiterInfo",
            "type": "object"
        },
        "qCodePage": {
            "desc": "Character set used in the file.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qHeaderSize": {
            "desc": "Size of the header.\nExample: If the header size is 2, the first two rows in the file are considered as header and not as data. The header can contain the field names.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qRecordSize": {
            "desc": "Record length.\nEach record (row of data) contains a number of columns with a fixed field size.\nThis property is used for fixed record data files.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qTabSize": {
            "desc": "Number of spaces that one tab character represents in the table file.\nThis property is used for fixed record data files.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qIgnoreEOF": {
            "desc": "Is set to true, the end-of-file character is not taken into account during reload.\nThis property is used for delimited files and fixed record data files.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qFixedWidthDelimiters": {
            "desc": "Positions of the field breaks in the table.\nThis property is used for fixed record data files.\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "FieldScores": {
        "qFieldName": {
            "desc": "Field name.\nOne of the field names defined in qFieldPairName.\n",
            "values": {},
            "type": "primitive"
        },
        "qCardinalRatio": {
            "desc": "Cardinality of a column/field divided by the number of rows in the table.\n If the cardinal ratio is 1, it means that the column is a candidate/primary key.\n",
            "instance": "double",
            "type": "primitive"
        },
        "qSymbolScore": {
            "desc": "Number of distinct matches between the two fieldsdefined in qFieldPairName divided by the number of distinct values in the fieldqFieldName.\nIf 0, it means that there are no common values between the two fields defined in qFieldPairName.\n",
            "instance": "double",
            "type": "primitive"
        },
        "qRowScore": {
            "desc": "Number of matches between the two fieldsdefined in qFieldPairName divided by the number of values in the field qFieldName.\nIf 0, it means that there are no common values between the two fields defined in qFieldPairName.\n",
            "instance": "double",
            "type": "primitive"
        }
    },
    "FolderItem": {
        "qName": {
            "desc": "Name of the folder item.",
            "instance": "String",
            "type": "primitive"
        },
        "qType": {
            "desc": "Type of the folder item.",
            "values": {
                "FOLDER": "",
                "FILE": "",
                "OTHER": ""
            },
            "type": "primitive"
        }
    },
    "GenericBookmarkEntry": {
        "qProperties": {
            "desc": "Information about the properties of the bookmark.",
            "instance": "GenericBookmarkProperties",
            "type": "object"
        },
        "qBookmark": {
            "desc": "Information about the bookmark.",
            "instance": "NxBookmark",
            "type": "object"
        }
    },
    "GenericBookmarkProperties": {
        "qInfo": {
            "desc": "Information about the bookmark.\nThis parameter is mandatory.\n",
            "instance": {},
            "type": "primitive"
        },
        "qMetaDef": {
            "desc": "Definition of the dynamic properties.",
            "instance": "Dynamic properties",
            "type": "primitive"
        }
    },
    "Function": {
        "qName": {
            "desc": "Name of the script function.",
            "instance": "String",
            "type": "primitive"
        },
        "qGroup": {
            "desc": "Group of the script function.",
            "instance": {
                "ALL": "FUNC_GROUP_ALL",
                "U": "FUNC_GROUP_UNKNOWN",
                "NONE": "FUNC_GROUP_NONE",
                "AGGR": "FUNC_GROUP_AGGR",
                "NUM": "FUNC_GROUP_NUMERIC",
                "RNG": "FUNC_GROUP_RANGE",
                "EXP": "FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC",
                "TRIG": "FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC",
                "FIN": "FUNC_GROUP_FINANCIAL",
                "MATH": "FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE",
                "COUNT": "FUNC_GROUP_COUNTER",
                "STR": "FUNC_GROUP_STRING",
                "MAPP": "FUNC_GROUP_MAPPING",
                "RCRD": "FUNC_GROUP_INTER_RECORD",
                "CND": "FUNC_GROUP_CONDITIONAL",
                "LOG": "FUNC_GROUP_LOGICAL",
                "NULL": "FUNC_GROUP_NULL",
                "SYS": "FUNC_GROUP_SYSTEM",
                "FILE": "FUNC_GROUP_FILE",
                "TBL": "FUNC_GROUP_TABLE",
                "DATE": "FUNC_GROUP_DATE_AND_TIME",
                "NUMI": "FUNC_GROUP_NUMBER_INTERPRET",
                "FRMT": "FUNC_GROUP_FORMATTING",
                "CLR": "FUNC_GROUP_COLOR",
                "RNK": "FUNC_GROUP_RANKING",
                "GEO": "FUNC_GROUP_GEO",
                "EXT": "FUNC_GROUP_EXTERNAL"
            },
            "type": "primitive"
        },
        "qSignature": {
            "desc": "Signature of the script function.\nGives general information about the function.\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "GenericBookmarkLayout": {
        "qInfo": {
            "desc": "Information about the object",
            "instance": "NxInfo",
            "type": "object"
        },
        "qMeta": {
            "desc": "Information on publishing and permissions",
            "instance": "Null or <span class=\"path\">NxMeta</span>",
            "type": "primitive"
        },
        "qBookmark": {
            "desc": "Information about the bookmark",
            "instance": "NxBookmark",
            "type": "object"
        }
    },
    "GenericDimensionInfo": {
        "qApprMaxGlyphCount": {
            "desc": "Length of the longest value in the field.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qCardinal": {
            "desc": "Number of distinct field values",
            "instance": "Integer",
            "type": "primitive"
        },
        "qTags": {
            "desc": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII\n",
            "instance": "String",
            "type": "array"
        },
        "qIsSemantic": {
            "desc": "If set to true, it means that the field is a semantic.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qAndMode": {
            "desc": "If set to true a logical AND (instead of a logical OR) is used when making selections in a field.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "GenericDimensionLayout": {
        "qInfo": {
            "desc": "Identifier and type of the dimension.",
            "instance": "NxInfo",
            "type": "object"
        },
        "qMeta": {
            "desc": "Information about publishing and permissions.",
            "instance": "Null or <span class=\"path\">NxMeta</span>",
            "type": "primitive"
        },
        "qDim": {
            "desc": "Name and label of the dimension, information about grouping.",
            "instance": {
                "N": "no grouping",
                "H": "drill-down",
                "C": "cyclic"
            },
            "type": "primitive"
        },
        "qDimInfos": {
            "desc": "Cardinal and tags related to the dimension. \nLength of the longest value in the field.\n",
            "instance": "GenericDimensionInfo",
            "type": "array"
        }
    },
    "GenericDimensionProperties": {
        "qInfo": {
            "desc": "Identifier and type of the dimension.\nThis parameter is mandatory.\n",
            "instance": "NxInfo",
            "type": "object"
        },
        "qDim": {
            "desc": "Definition of the dimension.\nThis parameter is mandatory.\n",
            "instance": "NxLibraryDimensionDef",
            "type": "object"
        },
        "qMetaDef": {
            "desc": "Definition of the dynamic properties.",
            "instance": "Dynamic properties",
            "type": "primitive"
        }
    },
    "GenericMeasureLayout": {
        "qInfo": {
            "desc": "Information about the object.",
            "instance": "NxInfo",
            "type": "object"
        },
        "qMeasure": {
            "desc": "Information about the measure.",
            "instance": "NxLibraryMeasureDef",
            "type": "object"
        },
        "qMeta": {
            "desc": "Information on publishing and permissions.",
            "instance": "Null or <span class=\"path\">NxMeta</span>",
            "type": "primitive"
        }
    },
    "GenericMeasureProperties": {
        "qInfo": {
            "desc": "Information about the measure.\nThis parameter is mandatory.\n",
            "instance": "NxInfo",
            "type": "object"
        },
        "qMeasure": {
            "desc": "Definition of the measure.\nThis parameter is mandatory.\n",
            "instance": "NxLibraryMeasureDef",
            "type": "object"
        },
        "qMetaDef": {
            "desc": "Definition of the dynamic properties.\n",
            "instance": "Dynamic properties",
            "type": "primitive"
        }
    },
    "GenericObjectEntry": {
        "qProperty": {
            "desc": "Information about the generic object properties.",
            "instance": "GenericObjectProperties",
            "type": "object"
        },
        "qChildren": {
            "desc": "Information about the children of the generic object.",
            "instance": "GenericObjectEntry",
            "type": "array"
        },
        "qEmbeddedSnapshotRef": {
            "desc": "Reference to a bookmark/snapshot that is embedded in the generic object.",
            "instance": "Null GenericBookmarkEntry",
            "type": "primitive"
        }
    },
    "GenericObjectLayout": {
        "qInfo": {
            "desc": "Identifier and type of the generic object.",
            "instance": "NxInfo",
            "type": "object"
        },
        "qMeta": {
            "desc": "Information about publishing and permissions.\nThis parameter is optional.\n",
            "instance": "Null or <span class=\"path\">NxMeta</span>",
            "type": "primitive"
        },
        "qExtendsId": {
            "desc": "Should beset to create an object that is linked to another object. Enter the identifier of the object you want to link to.\nIf you do not want to link your object, set this parameter to an empty string.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qHasSoftPatches": {
            "desc": "Is set to true if the generic object contains some properties that are not persistent (a soft patch was applied).",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qError": {
            "desc": "This parameter is optional.\nGives information on the error.\n",
            "instance": "Null NxLayoutErrors",
            "type": "primitive"
        },
        "qSelectionInfo": {
            "desc": "Information about the selections.",
            "instance": "NxSelectionInfo",
            "type": "object"
        }
    },
    "GenericObjectProperties": {
        "qInfo": {
            "desc": "Identifier and type of the object.\nThis parameter is mandatory.\n",
            "instance": "NxInfo",
            "type": "object"
        },
        "qExtendsId": {
            "desc": "Should beset to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).\nThis parameter is mandatory.\nIf you do not want to link your object, set this parameter to an empty string.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qMetaDef": {
            "desc": "Definition of the dynamic properties.\n",
            "instance": "Dynamic properties",
            "type": "primitive"
        }
    },
    "GenericVariableLayout": {
        "qInfo": {
            "desc": "Identifier and type of the object.\nThis parameter is mandatory.\n",
            "instance": "NxInfo",
            "type": "object"
        },
        "qMeta": {
            "desc": "Information about publishing and permissions.\nThis parameter is optional.\n",
            "instance": "NxMeta",
            "type": "object"
        },
        "qText": {
            "desc": "Some text.",
            "instance": "String",
            "type": "primitive"
        },
        "qNum": {
            "desc": "A value.",
            "instance": "Double",
            "type": "primitive"
        },
        "qIsScriptCreated": {
            "desc": "If set to true, it means that the variable was defined via script.",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "GenericVariableProperties": {
        "qInfo": {
            "desc": "Identifier and type of the object.\nThis parameter is mandatory.\n",
            "instance": "NxInfo",
            "type": "object"
        },
        "qMetaDef": {
            "desc": "Meta data.\n",
            "instance": "<p>Dynamic properties</p>",
            "type": "primitive"
        },
        "qName": {
            "desc": "Name of the variable.\nThe name must be unique.\nThis parameter is mandatory.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qComment": {
            "desc": "Comment related to the variable.\nThis parameter is optional.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qNumberPresentation": {
            "desc": "Defines the format of the value.\nThis parameter is optional.\n",
            "instance": "FieldAttributes",
            "type": "object"
        },
        "qIncludeInBookmark": {
            "desc": "Set this property to true to update the variable when applying a bookmark. The variable value will be persisted in the bookmark.\nThe value of a variable can affect the state of the selections.\nScript variables cannot be persisted in the bookmark.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qDefinition": {
            "desc": "Definition of the variable.",
            "instance": "String",
            "type": "primitive"
        }
    },
    "HyperCube": {
        "qStateName": {
            "desc": "Name of the alternate state.\nDefault is current selections $.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qSize": {
            "desc": "Defines the size of the hypercube.",
            "instance": "Size",
            "type": "object"
        },
        "qError": {
            "desc": "This parameter is optional and is displayed in case of error.",
            "instance": "NxValidationError",
            "type": "object"
        },
        "qDimensionInfo": {
            "desc": "Information on the dimension.",
            "instance": "NxDimensionInfo",
            "type": "array"
        },
        "qMeasureInfo": {
            "desc": "Information on the measure.",
            "instance": "NxMeasureInfo",
            "type": "array"
        },
        "qEffectiveInterColumnSortOrder": {
            "desc": "Sort order of the columns in the hypercube. \nColumn numbers are separated by a comma.\nExample: [1,0,2] means that the first column to be sorted was the column 1, followed by the column 0 and the column 2.\n",
            "instance": "Integer",
            "type": "array"
        },
        "qGrandTotalRow": {
            "desc": "Aggregate for measures of all values in the field.\nThe result value depends on the qAggrFunc defined in HyperCubeDef.\n",
            "instance": "NxCell",
            "type": "array"
        },
        "qDataPages": {
            "desc": "Set of data.\nIs empty if nothing has been defined in qInitialDataFetch in HyperCubeDef.\n",
            "instance": "NxDataPage",
            "type": "array"
        },
        "qPivotDataPages": {
            "desc": "Set of data for pivot tables.\nIs empty if nothing has been defined in qInitialDataFetch in HyperCubeDef.\n",
            "instance": "NxPivotPage",
            "type": "array"
        },
        "qStackedDataPages": {
            "desc": "Set of data for stacked tables.\nIs empty if nothing has been defined in qInitialDataFetch in HyperCubeDef.\n",
            "instance": "NxStackPage",
            "type": "array"
        },
        "qTreeNodesOnDim": {
            "desc": " The total number of nodes on each dimension (only applicable when qMode = T).",
            "instance": "Integer",
            "type": "array"
        },
        "qMode": {
            "desc": "Information about the mode of the visualization.",
            "values": {
                "S": "for straight table representation; DATA_MODE_STRAIGHT",
                "P": "for pivot table representation; DATA_MODE_PIVOT",
                "K": "for stacked table representation; DATA_MODE_PIVOT_STACK",
                "T": "for tree representation; DATA_MODE_TREE"
            },
            "type": "primitive"
        },
        "qNoOfLeftDims": {
            "desc": "Number of left dimensions \nDefault value is -1.\nThe index related to each left dimension depends on the position of the pseudo dimension (if any).\nFor example, a pivot table with:\n\n 4 dimensions in the following order: Country, City, Product and Category\none pseudo dimension in position 1\n3 left dimensions.\n\nimplies that:\n\nThe index 0 corresponds to the left dimension Country\nThe index 1 corresponds to the pseudo dimension\nThe index 2 corresponds to the left dimension City\nProduct and Category are top dimensions. \n\nAnother example:\n\n 4 dimensions in the following order: Country, City, Product and Category\none pseudo dimension in position -1\n3 left dimensions.\n\nimplies that:\n\nThe index -1 corresponds to the pseudo dimension; the pseudo dimension is the most to the right\nThe index 0 corresponds to the left dimension Country\nThe index 1 corresponds to the left dimension City\nThe index 2 corresponds to the left dimension Product\nCategory is a top dimension.\n\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qIndentMode": {
            "desc": "Is used for pivot tables only.\nIf set to true, the formatting of the results is slightly different.\nThis property is optional.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qLastExpandedPos": {
            "desc": "Is used for pivot tables only.\nPosition of the last expended cell.\nThis property is optional.\n",
            "instance": "NxCellPosition",
            "type": "object"
        },
        "qHasOtherValues": {
            "desc": "&nbsp;",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "HyperCubeDef": {
        "qStateName": {
            "desc": "Name of the alternate state.\nDefault is current selections $.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qDimensions": {
            "desc": "Array of dimensions.",
            "instance": "NxDimension",
            "type": "array"
        },
        "qMeasures": {
            "desc": "Array of measures.",
            "instance": "NxMeasure",
            "type": "array"
        },
        "qInterColumnSortOrder": {
            "desc": "Defines the sort order of the columns in the hypercube. \nColumn numbers are separated by a comma.\nExample: [1,0,2] means that the first column to be sorted should be the column 1, followed by the column 0 and the column 2.\nThe default sort order is the order in which the dimensions and measures have been defined in the hypercube. By default, the pseudo-dimension (if any) is the most to the right in the array.\nThe index of the pseudo-dimension (if any) is -1.\nPseudo dimensions only apply for pivot tables with more than one measure.\nA pseudo dimension groups together the measures defined in a pivot table. You can neither collapse/expand a pseudo dimension nor make any selections in it.\n Stacked pivot tables can only contain one measure.\n",
            "instance": "Integer",
            "type": "array"
        },
        "qSuppressZero": {
            "desc": "Removes zero values.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qSuppressMissing": {
            "desc": "Removes missing values.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qInitialDataFetch": {
            "desc": "Initial data set.",
            "instance": "NxPage",
            "type": "array"
        },
        "qMode": {
            "desc": "Defines the way the data are handled internally by the engine.\nDefault value is DATA_MODE_STRAIGHT.\nA pivot table can contain several dimensions and measures whereas a stacked pivot table can contain several dimensions but only one measure.\n",
            "values": {
                "S": "for straight table representation; DATA_MODE_STRAIGHT",
                "P": "for pivot table representation; DATA_MODE_PIVOT",
                "K": "for stacked table representation; DATA_MODE_PIVOT_STACK",
                "T": "for tree representation; DATA_MODE_TREE"
            },
            "type": "primitive"
        },
        "qNoOfLeftDims": {
            "desc": "Number of left dimensions.\nDefault value is -1. In that case, all dimensions are left dimensions.\nThe index related to each left dimension depends on the position of the pseudo dimension (if any).\nFor example, a pivot table with:\n\n 4 dimensions in the following order: Country, City, Product and Category\n\none pseudo dimension in position 1 (the position is defined in qInterColumnSortOrder)\nqInterColumnSortOrder is (0,-1,1,2,3)\n\n3 left dimensions (qNoOfLeftDims is set to 3).\n\nimplies that:\n\nThe index 0 corresponds to the left dimension Country\nThe index 1 corresponds to the pseudo dimension\nThe index 2 corresponds to the left dimension City\nProduct and Category are top dimensions. \n\nAnother example:\n\n 4 dimensions in the following order: Country, City, Product and Category\n3 left dimensions (qNoOfLeftDims is set to 3).\none pseudo dimension\nthe property qInterColumnSortOrder is left empty.\n\nimplies that:\n\nThe index 0 corresponds to the left dimension Country\nThe index 1 corresponds to the left dimension City\nThe index 2 corresponds to the left dimension Product\nCategory is a top dimension.\nThe pseudo dimension is a top dimension\n\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qAlwaysFullyExpanded": {
            "desc": "If this property is set to true, the cells are always expanded. It implies that it is not possible to collapse any cells.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qMaxStackedCells": {
            "desc": "Maximum number of cells for an initial data fetch (set in qInitialDataFetch) when in stacked mode (qMode is K).\nThe default value is 5000.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qPopulateMissing": {
            "desc": "If this property is set to true, the missing symbols (if any) are replaced by 0 if the value is a numeric and by an empty string if the value is a string.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qShowTotalsAbove": {
            "desc": "If set to true, the total (if any) is shown on the first row.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qIndentMode": {
            "desc": "This property applies for pivot tables and allows to change the layout of the table. An indentation is added to the beginning of each row.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qCalcCond": {
            "desc": "Specifies a calculation condition, which must be fulfilled for the hypercube to be (re)calculated.\nAs long as the condition is not met, the engine does not perform a new calculation.\nThis property is optional. By default, there is no calculation condition.\n",
            "instance": "ValueExpr",
            "type": "object"
        },
        "qSortbyYValue": {
            "desc": "To enable the sorting by ascending or descending order in the values of a measure. \nThis property applies to pivot tables and stacked pivot tables.\nIn the case of a pivot table, the measure or pseudo dimension should be defined as a top dimension. The sorting is restricted to the values of the first measure in a pivot table.\n",
            "values": {
                "0": "for no sorting",
                "1": "for sorting ascending",
                "-1": "for sorting descending"
            },
            "type": "primitive"
        }
    },
    "InteractDef": {
        "qType": {
            "desc": "Interaction type.",
            "values": {
                "IT_SCRIPTLINE": "the engine returns the statement that will be executed next.",
                "IT_MSGBOX": "the engine returns a script execution error message. This type can only be returned if the parameter qInteractOnError was set to true when calling the ConfigureReload method.",
                "IT_BREAK": "the engine breaks and waits for a response on what to do next.",
                "IT_END": "the engine has finished to execute all statements in the script."
            },
            "type": "primitive"
        },
        "qTitle": {
            "desc": "Title used in the message box dialog. \nThis property is relevant if qType is IT_MSGBOX.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qMsg": {
            "desc": "Message used in the message box dialog. \nThis property is relevant if qType is IT_MSGBOX.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qButtons": {
            "desc": "Buttons displayed in the message box dialog.\n This property is relevant if qType is IT_MSGBOX.\nOne of:\n\n0 means that the qButtons property is not relevant.\n17 means that the message box contains the OK and Cancel buttons or the stop-sign icon.\n\n",
            "values": {
                "0 means that the qButtons property is not relevant.": "",
                "17 means that the message box contains the OK and Cancel buttons or the stop-sign icon.": ""
            },
            "type": "primitive"
        },
        "qLine": {
            "desc": "Next script statement to be executed.\nThis property is used if the type of interaction is IT_SCRIPTLINE.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qOldLineNr": {
            "desc": "First line number of the previously executed statement.\nThis property is used if the type of interaction is IT_SCRIPTLINE.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qNewLineNr": {
            "desc": "First line number of the next statement to be executed.\nThis property is used if the type of interaction is IT_SCRIPTLINE.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qPath": {
            "desc": "Path specified by the Include script variable.\nThis property is used if the type of interaction is IT_SCRIPTLINE.\nExample of an Include variable:\n$(Include=lib:\\\\MyDataFiles\\abc.txt);\n\n",
            "instance": "String",
            "type": "primitive"
        },
        "qHidden": {
            "desc": "This property is set to true if the returned statement is an hidden script statement.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qResult": {
            "desc": "Not relevant for describing the requested user interaction.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qInput": {
            "desc": "Is not used in Qlik Sense.",
            "instance": "String",
            "type": "primitive"
        }
    },
    "ListObject": {
        "qStateName": {
            "desc": "Name of the alternate state.\nDefault is current selections $.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qSize": {
            "desc": "Defines the size of a list object.",
            "instance": "Size",
            "type": "object"
        },
        "qError": {
            "desc": "This parameter is optional and is displayed in case of error.",
            "instance": "NxValidationError",
            "type": "object"
        },
        "qDimensionInfo": {
            "desc": "Information about the dimension.",
            "instance": "NxDimensionInfo",
            "type": "object"
        },
        "qExpressions": {
            "desc": "Lists the expressions in the list object.",
            "instance": "NxListObjectExpression",
            "type": "array"
        },
        "qDataPages": {
            "desc": "Set of data.\nIs empty if nothing has been defined in qInitialDataFetch in ListObjectDef.\n",
            "instance": "NxDataPage",
            "type": "array"
        }
    },
    "ListObjectDef": {
        "qStateName": {
            "desc": "Name of the alternate state.\nDefault is current selections $.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qLibraryId": {
            "desc": "Refers to a dimension stored in the library.",
            "instance": "String",
            "type": "primitive"
        },
        "qDef": {
            "desc": "Refers to a dimension stored in the list object.",
            "instance": "NxInlineDimensionDef",
            "type": "object"
        },
        "qAutoSortByState": {
            "desc": "Defines the sorting by state.",
            "instance": "NxAutoSortByStateDef",
            "type": "object"
        },
        "qFrequencyMode ": {
            "desc": "Defines the frequency mode. The frequency mode is used to calculate the frequency of a value in a list object.\nThis parameter is optional.\nDefault is NX_FREQUENCY_NONE.\n",
            "values": {
                "NX_FREQUENCY_NONE": "",
                "NX_FREQUENCY_VALUE": "",
                "NX_FREQUENCY_PERCENT. The percentage is between 0 and 100.": "",
                "NX_FREQUENCY_RELATIVE. Same as percent except that the relative value is between 0 and 1.": ""
            },
            "type": "primitive"
        },
        "qShowAlternatives": {
            "desc": "If set to true, alternative values are allowed in qData.\nThis parameter is optional. The default value is false.\nIf set to false, no alternative values are displayed in qData. Values are excluded instead.\nNote that on the contrary, the qStateCounts parameter counts the excluded values as alternative values.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qInitialDataFetch": {
            "desc": "Fetches an initial data set.",
            "instance": "NxPage",
            "type": "array"
        },
        "qExpressions": {
            "desc": "Lists the expressions in the list object.\nThis parameter is optional.\n",
            "instance": "NxListObjectExpressionDef",
            "type": "array"
        }
    },
    "LocaleInfo": {
        "qDecimalSep": {
            "desc": "Decimal separator.",
            "instance": "String",
            "type": "primitive"
        },
        "qThousandSep": {
            "desc": "Thousand separator.",
            "instance": "String",
            "type": "primitive"
        },
        "qListSep": {
            "desc": "List separator.",
            "instance": "String",
            "type": "primitive"
        },
        "qMoneyDecimalSep": {
            "desc": "Money decimal separator.",
            "instance": "String",
            "type": "primitive"
        },
        "qMoneyThousandSep": {
            "desc": "Money thousand separator.",
            "instance": "String",
            "type": "primitive"
        },
        "qCurrentYear": {
            "desc": "Current year.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qMoneyFmt": {
            "desc": "Money format.\nExample: #.##0,00 kr;-#.##0,00 kr\n",
            "instance": "String",
            "type": "primitive"
        },
        "qTimeFmt": {
            "desc": "Time format.\nExample: hh:mm:ss\n",
            "instance": "String",
            "type": "primitive"
        },
        "qDateFmt": {
            "desc": "Date format.\nExample: YYYY-MM-DD\n",
            "instance": "String",
            "type": "primitive"
        },
        "qTimestampFmt": {
            "desc": "Time stamp format.\nExample: YYYY-MM-DD hh:mm:ss[.fff]\n",
            "instance": "String",
            "type": "primitive"
        },
        "qCalendarStrings": {
            "desc": "Information about the calendar.",
            "instance": "CalendarStrings",
            "type": "object"
        },
        "qFirstWeekDay": {
            "desc": "First day of the week, starting from 0.\nAccording to ISO 8601, Monday is the first day of the week.\n\n0 = Monday\n1 = Tuesday\n..\n6 =&nbsp;Sunday\n\nIf this property has not been set in a script, the returned value comes from the Windows operating system.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qBrokenWeeks": {
            "desc": "Is set to true if broken weeks are allowed in a year.\nAccording to ISO 8601, no broken weeks should be allowed.\nThis property is not shown if set to false.\nIf qBrokenWeeks is set to true, qReferenceDay is irrelevant.\nIf this property has not been set in a script, the returned value comes from the Windows operating system.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qReferenceDay": {
            "desc": "Day in the year that is always in week 1.\nAccording to ISO 8601, January 4th should always be part of the first week of the year (qReferenceDay=4).\nRecommended values are in the range 1 and 7.\nIf this property has not been set in a script, the returned value comes from the Windows operating system.\nThis property is not relevant if there are broken weeks in the year.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qFirstMonthOfYear": {
            "desc": "First month of the year, starting from 1.\nAccording to ISO 8601, Januaryis the first month of the year.\n\n1 = January\n2 = February\n 12 = January\n\nIf this property has not been set in a script, the returned value comes from the Windows operating system.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qCollation": {
            "desc": " Locale name (following language tagging convention RFC 4646): \n&lt;language&gt;-&lt;REGION&gt;\n\nWhere\n\nlanguage is a lowercase ISO&nbsp;639 language code\nREGION specifies an uppercase ISO 3166 country code.\n\nIf this property has not been set in a script, the returned value comes from the Windows operating system.\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "MeasureListDef": {
        "qType": {
            "desc": "Type of the list",
            "instance": "String",
            "type": "primitive"
        },
        "qData": {
            "desc": "Data\n",
            "instance": "JSON",
            "type": "primitive"
        }
    },
    "MediaList": {
        "qItems": {
            "desc": "Information about the list of media files.\nIn Qlik Sense Desktop, the media files are retrieved from:\n%userprofile%\\Documents\\Qlik\\Sense\\Content\\Default\n\nIn Qlik Sense Enterprise, the media files are retrieved from:\n&lt;installation_directory&gt;\\Qlik\\Sense\\Repository\\Content\\Default\nThe default installation directory is ProgramData.\n",
            "instance": "MediaListItem",
            "type": "array"
        }
    },
    "MediaListDef": {},
    "MediaListItem": {
        "qUrlDef": {
            "desc": "Relative path to the media file. The URL is static.\nMedia files located:\n• in the /content/default/ folder are outside the qvf file.\n• in the/media/ folder are embedded in the qvf file.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qUrl": {
            "desc": "Relative path to the media file.\nMedia files located:\n• in the /content/default/ folder are outside the qvf file.\n• in the /media/ folder are embedded in the qvf file.\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "NxAppProperties": {
        "qTitle": {
            "desc": "App title.",
            "instance": "String",
            "type": "primitive"
        },
        "qLastReloadTime": {
            "desc": "Last reload time of the app.",
            "instance": "String",
            "type": "primitive"
        },
        "qThumbnail": {
            "desc": "App thumbnail.",
            "instance": "StaticContentUrlDef",
            "type": "object"
        },
        "qMigrationHash": {
            "desc": "Internal property reserved for app migration.\n Patch version of the app.\nDo not update.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qSavedInProductVersion": {
            "desc": "Internal property reserved for app migration.\nThe app is saved in this version of the product.\nDo not update.\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "MeasureList": {
        "qItems": {
            "desc": "Information about the list of measures",
            "instance": "NxContainerEntry",
            "type": "array"
        }
    },
    "NxAppLayout": {
        "qTitle": {
            "desc": "Title of the app.",
            "instance": "String",
            "type": "primitive"
        },
        "qFileName": {
            "desc": "In Qlik Sense Enterprise, this property corresponds to the app identifier (GUID).\nIn Qlik Sense Desktop, this property corresponds to the full path of the app.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qLastReloadTime": {
            "desc": "Date and time of the last reload of the app in ISO format.",
            "instance": "String",
            "type": "primitive"
        },
        "qModified": {
            "desc": "Is set to true if the app has been updated since the last save.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qHasScript": {
            "desc": "Is set to true if a script is defined in the app.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qStateNames": {
            "desc": "Array of alternate states.",
            "instance": "String",
            "type": "array"
        },
        "qMeta": {
            "desc": "Information on publishing and permissions.",
            "instance": "NxMeta",
            "type": "object"
        },
        "qLocaleInfo": {
            "desc": "Information about the locale.",
            "instance": "LocaleInfo",
            "type": "object"
        },
        "qHasData": {
            "desc": "Is set to true if the app contains data following a script reload.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qReadOnly": {
            "desc": "If set to true, it means that the app is read-only.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qIsOpenedWithoutData": {
            "desc": "If set to true, it means that the app was opened without loading its data.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qThumbnail": {
            "desc": "App thumbnail.",
            "instance": "StaticContentUrl",
            "type": "object"
        }
    },
    "NxAttrDimDef": {
        "qDef": {
            "desc": "Expression or field name.",
            "instance": "String",
            "type": "primitive"
        },
        "qLibraryId": {
            "desc": "LibraryId for dimension.",
            "instance": "String",
            "type": "primitive"
        },
        "qSortBy": {
            "desc": "Sorting.",
            "instance": "SortCriteria",
            "type": "primitive"
        }
    },
    "NxAttrDimInfo": {
        "qCardinal": {
            "desc": "Cardinality of the attribute expression. ",
            "instance": "Int",
            "type": "primitive"
        },
        "qSize": {
            "desc": "Number of rows.",
            "instance": "Size",
            "type": "primitive"
        },
        "qFallbackTitle": {
            "desc": "The title for the attribute dimension.",
            "instance": "String",
            "type": "primitive"
        },
        "qLocked": {
            "desc": "The Locked value of the dimension.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qError": {
            "desc": "Validation error.",
            "instance": "REF(NxValidationError)",
            "type": "primitive"
        }
    },
    "NxAttrExprDef": {
        "qExpression": {
            "desc": "Definition of the attribute expression.\nExample: \"Max(OrderID)\"\n",
            "instance": "String",
            "type": "primitive"
        },
        "qLibraryId": {
            "desc": "Definition of the attribute expression stored in the library..\nExample: \"MyGenericMeasure\"\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "NxAttrExprInfo": {
        "qMin": {
            "desc": "Minimum value.\n",
            "instance": "Double",
            "type": "primitive"
        },
        "qMax": {
            "desc": "Maximum value.\n",
            "instance": "Double",
            "type": "primitive"
        },
        "qContinuousAxes": {
            "desc": "&nbsp;",
            "instance": "Bool",
            "type": "primitive"
        },
        "qIsCyclic": {
            "desc": "&nbsp;",
            "instance": "Bool",
            "type": "primitive"
        },
        "qFallbackTitle": {
            "desc": "&nbsp;",
            "instance": "String",
            "type": "primitive"
        }
    },
    "NxAttributeExpressionValues": {
        "qValues": {
            "desc": "List of attribute expressions values.",
            "instance": "NxSimpleValue",
            "type": "array"
        }
    },
    "NxAttributeDimValues": {
        "qValues": {
            "desc": "List of values.\n",
            "instance": "NxSimpleDimValue",
            "type": "array"
        }
    },
    "NxAutoSortByStateDef": {
        "qDisplayNumberOfRows": {
            "desc": "This parameter applies to list objects.\nIf the number of selected values in the list object is greater than the value set in qDisplayNumberOfRows, the selected lines are promoted at the top of the list object.\nIf qDisplayNumberOfRows is set to a negative value or to 0, the sort by state is disabled.\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxAxisTicks": {
        "qName": {
            "desc": "Name of the derived definition.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qTicks": {
            "desc": "List of ticks.",
            "instance": "NxTickCell",
            "type": "array"
        },
        "qTags": {
            "desc": "List of tags.",
            "instance": "String",
            "type": "array"
        }
    },
    "NxBookmark": {
        "qStateData": {
            "desc": "List of selections for each state.\n",
            "instance": "AlternateStateData",
            "type": "array"
        },
        "qUtcModifyTime": {
            "desc": "Time when the bookmark was created.",
            "instance": "Double precision floating point",
            "type": "primitive"
        },
        "qVariableItems": {
            "desc": "List of the variables in the app at the time the bookmark was created. ",
            "instance": "BookmarkVariableItem",
            "type": "array"
        }
    },
    "NxAxisData": {
        "qAxis": {
            "desc": "List of Axis data.",
            "instance": "NxAxisTicks",
            "type": "array"
        }
    },
    "NxCellPosition": {
        "qx": {
            "desc": "Position of the cell on the x-axis.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qy": {
            "desc": "Position of the cell on the y-axis.",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxCellRows": {
        "NxCellRows": {
            "desc": "Array of data.",
            "instance": "NxCell",
            "type": "array"
        }
    },
    "NxCell": {
        "qText": {
            "desc": "Some text.\nThis parameter is optional.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qNum": {
            "desc": "A value.\nThis parameter is optional.\n",
            "instance": "Double precision floating point",
            "type": "primitive"
        },
        "qElemNumber": {
            "desc": "Rank number of the value, starting from 0.\nIf the element number is a negative number, it means that the returned value is not an element number.\nYou can get the following negative values:\n\n-1: the cell is a Total cell. It shows a total.\n-2: the cell is collapsed. Applies to pivot tables.\n-3: the cell belongs to the group Others.\n-4: the cell is empty. Applies to pivot tables.\n\n&nbsp;\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qState": {
            "desc": "State of the value.\nThe default state for a measure is L.\n",
            "values": {
                "L": "Locked",
                "S": "Selected",
                "O": "Optional",
                "D": "Deselected",
                "A": "Alternative",
                "X": "eXcluded",
                "XS": "eXcluded Selected",
                "XL": "eXcluded Locked"
            },
            "type": "primitive"
        },
        "qIsEmpty": {
            "desc": "Is set to true, if qText and qNum are empty.\nThis parameter is optional. The default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qIsTotalCell": {
            "desc": "Is set to true if a total is displayed in the cell.\nThis parameter is optional. The default value is false.\nNot applicable to list objects.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qIsOtherCell": {
            "desc": "Is set to true if the cell belongs to the group Others.\nDimension values can be set as Others depending on what has been defined in OtherTotalSpecProp.\nThis parameter is optional. The default value is false.\nNot applicable to list objects.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qFrequency": {
            "desc": "Frequency of the value.\nThis parameter is optional.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qHighlightRanges": {
            "desc": "Search hits.\nThe search hits are highlighted.\nThis parameter is optional.\n",
            "instance": "NxHighlightRanges",
            "type": "object"
        },
        "qAttrExps": {
            "desc": "Attribute expression values.",
            "instance": "NxAttributeExpressionValues",
            "type": "object"
        },
        "qIsNull": {
            "desc": "Is set to true if the value is Null.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qAttrDims": {
            "desc": "Attribute dimensions values.",
            "instance": "NxAttributeDimValues",
            "type": "object"
        }
    },
    "NxContainerEntry": {
        "qInfo": {
            "desc": "Information about the object",
            "instance": "NxInfo",
            "type": "object"
        },
        "qMeta": {
            "desc": "Information on publishing and permissions",
            "instance": "NxMeta",
            "type": "object"
        },
        "qData": {
            "desc": "Set of data",
            "instance": "JSON",
            "type": "primitive"
        }
    },
    "NxContinousDataOptions": {
        "qStart": {
            "desc": "Start value.\n",
            "instance": "Double",
            "type": "primitive"
        },
        "qEnd": {
            "desc": "End value.\n",
            "instance": "Double",
            "type": "primitive"
        },
        "qNbrPoints": {
            "desc": "Number of bins for binning.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qMaxNbrTicks": {
            "desc": "Maximum number of ticks.",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxContinuousRangeSelectInfo": {
        "qRange": {
            "desc": "Range information.\n",
            "instance": {},
            "type": "primitive"
        },
        "qDimIx": {
            "desc": "Dimension index.\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxCurrentSelectionItem": {
        "qField": {
            "desc": "Name of the field that is selected.",
            "instance": "String",
            "type": "primitive"
        },
        "qIsNum": {
            "desc": "Optional parameter. This parameter is displayed if its value is true.\nIs set to true if the field is a numeric.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qLocked": {
            "desc": "Optional parameter. This parameter is displayed if its value is true.\nIs set to true if the field is locked.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qNotSelectedFieldSelectionInfo": {
            "desc": "Information about the fields that are not selected.",
            "instance": "NxFieldSelectionInfo",
            "type": "array"
        },
        "qOneAndOnlyOne": {
            "desc": "Optional parameter. This parameter is displayed if its value is true.\nProperty that is set to a field. Is set to true if the field cannot be unselected. \n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qRangeInfo": {
            "desc": "Information about the range of selected values.\nIs empty if there is no range of selected values.\n",
            "instance": "RangeSelectInfo",
            "type": "array"
        },
        "qReadableName": {
            "desc": "Label that, if defined, is displayed in current selections instead of the actual expression. \n",
            "instance": "String",
            "type": "primitive"
        },
        "qSelected": {
            "desc": "Values that are selected.",
            "instance": "String",
            "type": "primitive"
        },
        "qSelectedCount": {
            "desc": "Number of values that are selected.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qSelectedFieldSelectionInfo": {
            "desc": "Information about the fields that are selected.",
            "instance": "NxFieldSelectionInfo",
            "type": "array"
        },
        "qSelectionThreshold": {
            "desc": "Maximum values to show in the current selections.\nThe default value is 6.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qSortIndex": {
            "desc": "Sort index of the field. Indexing starts from 0.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qStateCounts": {
            "desc": "Number of values in a particular state.",
            "instance": "NxStateCounts",
            "type": "object"
        },
        "qTextSearch": {
            "desc": "Optional parameter.\nText that was used for the search. This parameter is filled when searching for a value and selecting it.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qTotal": {
            "desc": "Number of values in the field.",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxDataAreaPage": {
        "qLeft": {
            "desc": "Position from the left.\nCorresponds to the lowest possible value of the first measure (the measure on the x-axis).\n",
            "instance": "<p>Double</p>",
            "type": "primitive"
        },
        "qTop": {
            "desc": "Position from the top.\nCorresponds to the highest possible value of the second measure (the measure on the y-axis).\n",
            "instance": "<p>Double</p>",
            "type": "primitive"
        },
        "qWidth": {
            "desc": "Width of the page.\nCorresponds to the highest possible value of the first measure (the measure on the x-axis).\n",
            "instance": "<p>Double</p>",
            "type": "primitive"
        },
        "qHeight": {
            "desc": "Height of the page.\nThe difference between qTop and qHeight gives the lowest possible value of the second measure (the measure on the y-axis).\n",
            "instance": "<p>Double</p>",
            "type": "primitive"
        }
    },
    "NxDataPage": {
        "qMatrix": {
            "desc": "Array of data.",
            "instance": "NxCellRows",
            "type": "array"
        },
        "qTails": {
            "desc": "Array of tails.\nIs used for hypercube objects with multiple dimensions. It might happen that due to the window size some elements in a group cannot be displayed in the same page as the other elements of the group. Elements of a group of dimensions can be part of the previous or the next tail.\nIf there is no tail, the array is empty [ ].\n",
            "instance": "NxGroupTail",
            "type": "array"
        },
        "qArea": {
            "desc": "Size and offset of the data in the matrix.",
            "instance": "Rect",
            "type": "object"
        },
        "qIsReduced": {
            "desc": "Is set to true, if the data have been reduced.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "NxDerivedField": {
        "qId": {
            "desc": "Identifier of the derived field. \nThe identifier is unique.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qName": {
            "desc": "Combination of field name, definition and method.\nExample:\nOrderDate.MyDefinition.Year\n\n",
            "instance": "String",
            "type": "primitive"
        },
        "qMethod": {
            "desc": "Method name associated to the derived field.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qExpr": {
            "desc": "Expression of the derived field.\nExample:\nIf qName is OrderDate.MyDefinition.Year, the expression is as follows:\n=${Mydefinition(OrderDate).Year}\n\n",
            "instance": "String",
            "type": "primitive"
        },
        "qTags": {
            "desc": "List of tags.",
            "instance": "String",
            "type": "array"
        }
    },
    "NxDerivedFieldDescriptionList": {
        "qDerivedFieldLists": {
            "desc": "Information about the derived fields.",
            "instance": "NxDerivedFieldsData",
            "type": "array"
        }
    },
    "NxDerivedFieldsData": {
        "qDerivedDefinitionName": {
            "desc": "Name of the derived definition.",
            "instance": "String",
            "type": "primitive"
        },
        "qFieldDefs": {
            "desc": "List of the derived fields.",
            "instance": "NxDerivedField",
            "type": "array"
        },
        "qGroupDefs": {
            "desc": "List of the derived groups.",
            "instance": "NxDerivedGroup",
            "type": "array"
        },
        "qTags": {
            "desc": "List of tags on the derived fields.",
            "instance": "String",
            "type": "array"
        }
    },
    "NxDimension": {
        "qLibraryId": {
            "desc": "Refers to a dimension stored in the library.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qDef": {
            "desc": "Refers to a dimension stored in the hypercube.",
            "instance": "NxInlineDimensionDef",
            "type": "object"
        },
        "qNullSuppression": {
            "desc": "If set to true, no null values are returned.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qOtherTotalSpec": {
            "desc": "Sets the dimension limits. Each dimension of a hypercube is configured separately.\nDefines if some values (grouped as Others) should be grouped together in the visualization.\nFor example in a pie chart all values lower than 200 could be grouped together.\n",
            "instance": "OtherTotalSpecProp",
            "type": "object"
        },
        "qShowAll": {
            "desc": "If set to true, all dimension values are shown.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qOtherLabel": {
            "desc": "This property is used when some dimension limits are set.\nLabel of the Others group. The default label is Others.\nExample:\"qOtherLabel\":\"=&lt;label&gt;\"\nor\"qOtherLabel\":{\"qExpr\":\"=&lt;label&gt;\"}\nWhere\n\n&lt;label&gt; is the label of the Others group.\n\n",
            "instance": "String",
            "type": "primitive"
        },
        "qTotalLabel": {
            "desc": "If this property is set, the total of the calculated values is returned.\nThe default label is Total.\nExample:\n\"qTotalLabel\":\"=&lt;label&gt;\"\n\nor\n\"qTotalLabel\":{\"qExpr\":\"=&lt;label&gt;\"}\n\nWhere\n\n&lt;label&gt; is the label of the Totalgroup.\n\n",
            "instance": "String",
            "type": "primitive"
        },
        "qCalcCond": {
            "desc": "Specifies a calculation condition, which must be fulfilled for the dimension to be calculated.\nIf the calculation condition is not met, the dimension is excluded from the calculation.\nThis property is optional. By default, there is no calculation condition.\n",
            "instance": "ValueExpr",
            "type": "object"
        },
        "qAttributeExpressions": {
            "desc": "List of attribute expressions.\n",
            "instance": "NxAttrExprDef",
            "type": "array"
        },
        "qAttributeDimensions": {
            "desc": "List of attribute dimensions.",
            "instance": "NxAttrDimDef",
            "type": "array"
        }
    },
    "NxDerivedGroup": {
        "qId": {
            "desc": "Identifier of the group.",
            "instance": "String",
            "type": "primitive"
        },
        "qName": {
            "desc": "Name of the derived group.",
            "instance": "String",
            "type": "primitive"
        },
        "qGrouping": {
            "desc": "Grouping type.\nThe grouping should be either H or C (Grouping is mandatory for derived definitions).\nIs mandatory.\n",
            "values": {
                "N": "no grouping",
                "H": "drill-down",
                "C": "cyclic"
            },
            "type": "primitive"
        },
        "qFieldDefs": {
            "desc": "List of the derived fields in the group.",
            "instance": "String",
            "type": "array"
        }
    },
    "NxDimensionInfo": {
        "qFallbackTitle": {
            "desc": "Corresponds to the label of the dimension that is selected.\nIf the label is not defined then the field name is used.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qApprMaxGlyphCount": {
            "desc": "Length of the longest value in the field.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qCardinal": {
            "desc": "Number of distinct field values. ",
            "instance": "Integer",
            "type": "primitive"
        },
        "qLocked": {
            "desc": "Is set to true if the field is locked.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qSortIndicator": {
            "desc": "Sort indicator.\nThis parameter is optional.\nThe default value is no sorting.\n",
            "values": {
                "N": "no sorting",
                "A": "sorting ascending",
                "D": "sorting descending"
            },
            "type": "primitive"
        },
        "qGroupFallbackTitles": {
            "desc": " Array of dimension labels.\nContains the labels of all dimensions in a hierarchy group (for example the labels of all dimensions in a drill down group).\n",
            "instance": "String",
            "type": "array"
        },
        "qGroupPos": {
            "desc": "Index of the dimension that is currently in use.\nqGroupPos is set to 0 if there are no hierarchical groups (drill-down groups) or cycle groups.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qStateCounts": {
            "desc": "Number of values in a particular state.",
            "instance": "NxStateCounts",
            "type": "object"
        },
        "qTags": {
            "desc": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII\n",
            "instance": "String",
            "type": "array"
        },
        "qError": {
            "desc": "This parameter is optional.\nGives information on the error.\n",
            "instance": "NxValidationError",
            "type": "object"
        },
        "qDimensionType": {
            "desc": "Binary format of the field.",
            "values": {
                "D": "discrete (String)",
                "N": "numeric (Double)",
                "T": "Time (Timestamp)"
            },
            "type": "primitive"
        },
        "qReverseSort": {
            "desc": "If set to true, it inverts the sort criteria in the field.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qGrouping": {
            "desc": "Defines the grouping.",
            "values": {
                "N": "no grouping",
                "H": "drill-down",
                "C": "cyclic"
            },
            "type": "primitive"
        },
        "qIsSemantic": {
            "desc": "If set to true, it means that the field is a semantic.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qNumFormat": {
            "desc": "Format of the field.\nThis parameter is optional.\n",
            "instance": "FieldAttributes",
            "type": "object"
        },
        "qIsAutoFormat": {
            "desc": "This parameter is set to true if qNumFormat is set to U (unknown). The engine guesses the type of the field based on the field's definition.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qGroupFieldDefs": {
            "desc": "Array of field names.",
            "instance": "String",
            "type": "array"
        },
        "qAttrExprInfo": {
            "desc": "Array of attribute expressions.",
            "instance": "NxAttrExprInfo",
            "type": "array"
        },
        "qMin": {
            "desc": "Minimum value.",
            "instance": "Double",
            "type": "primitive"
        },
        "qMax": {
            "desc": "Maximum value.",
            "instance": "Double",
            "type": "primitive"
        },
        "qContinuousAxes": {
            "desc": "Is continuous axis used.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qIsCyclic": {
            "desc": "Is a cyclic dimension used.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qDerivedField": {
            "desc": "Is derived field is used as a dimension.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qAttrDimInfo": {
            "desc": "Array of attribute dimensions.",
            "instance": "NxAttrDimInfo",
            "type": "array"
        }
    },
    "NxEngineVersion": {
        "qComponentVersion": {
            "desc": "Version number of the Qlik engine component.",
            "instance": "String",
            "type": "primitive"
        }
    },
    "NxFieldDescription": {
        "qIsSemantic": {
            "desc": "If set to true, it means that the field is a semantic.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qIsHidden": {
            "desc": "If set to true, it means that the field is hidden.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "q IsSystem": {
            "desc": "If set to true, it means that the field is a system field.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qAndMode": {
            "desc": "If set to true a logical AND (instead of a logical OR) is used when making selections in a field.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qName": {
            "desc": "Name of the field",
            "instance": "String",
            "type": "primitive"
        },
        "qCardinal": {
            "desc": "Number of distinct field values",
            "instance": "Integer",
            "type": "primitive"
        },
        "qTags": {
            "desc": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII\n",
            "instance": "String",
            "type": "array"
        },
        "qIsDefinitionOnly": {
            "desc": "If set to true, it means that the field is a field on the fly.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qDerivedFieldData": {
            "desc": "Lists the derived fields if any.",
            "instance": "NxDerivedFieldDescriptionList",
            "type": "object"
        },
        "qIsDetail": {
            "desc": "Is used for Direct Discovery.\nIf set to true, it means that the type of the field is detail.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qIsImplicit": {
            "desc": "Is used for Direct Discovery.\nIf set to true, it means that the type of the field is measure.\n",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "NxFieldProperties": {
        "qOneAndOnlyOne": {
            "desc": "This parameter is set to true, if the field has one and only one selection (not 0 and not more than 1).\nIf this property is set to true, the field cannot be cleared anymore and no more selections can be performed in that field.\nThe property OneAndOnlyOne can be set to true if one and only value has been selected in the field prior to setting the property.\n",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "NxFieldSelectionMode": {},
    "NxGetBookmarkOptions": {
        "qTypes": {
            "desc": "List of object types.\n",
            "instance": "Array of strings",
            "type": "array"
        },
        "qData": {
            "desc": "Set of data.",
            "instance": "JSON",
            "type": "primitive"
        }
    },
    "NxGroupTail": {
        "qUp": {
            "desc": "Number of elements that are part of the previous tail.\nThis number depends on the paging, more particularly it depends on the values defined in qTop and qHeight\nThis parameter is optional.Is not shown if the value is 0.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qDown": {
            "desc": "Number of elements that are part of the next tail.\nThis number depends on the paging, more particularly it depends on the values defined in qTop and qHeight\nThis parameter is optional. Is not shown if the value is 0.\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxGetObjectOptions": {
        "qTypes": {
            "desc": "List of object types.\n",
            "instance": "Array of strings",
            "type": "array"
        },
        "qIncludeSessionObjects": {
            "desc": "Set to true to include session objects.\nDefault: false\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qData": {
            "desc": "Set of data.",
            "instance": "JSON",
            "type": "primitive"
        }
    },
    "NxFieldSelectionInfo": {
        "qName": {
            "desc": "Name of the field.",
            "instance": "String",
            "type": "primitive"
        },
        "qFieldSelectionMode": {
            "desc": "Selection mode.",
            "values": {
                "NORMAL": "a selection in normal mode.",
                "AND": "a selection in AND&nbsp;mode.",
                "NOT": "a selection NOT in AND mode."
            },
            "type": "primitive"
        }
    },
    "NxInfo": {
        "qId": {
            "desc": "Identifier of the object.\nIf the chosen identifier is already in use, the engine automatically sets another one.\nThis parameter is optional. If an identifier is not set, the engine automatically sets one.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qType": {
            "desc": "Type of the object.\nThis parameter is mandatory.\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "NxInlineMeasureDef": {
        "qLabel": {
            "desc": "Name of the measure.\nThis parameter is optional.\nAn empty string is returned as a default value.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qLabelExpression": {
            "desc": "Label expression.\nThis parameter is optional.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qDescription": {
            "desc": "Description of the measure.\nThis parameter is optional.\nAn empty string is returned as a default value.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qTags": {
            "desc": "Name connected to the measure that is used for search purposes.\nThis parameter is optional.\nA&nbsp;measure can have several tags.\n",
            "instance": "String",
            "type": "array"
        },
        "qGrouping": {
            "desc": "Default value is no grouping.\nThis parameter is optional.\n",
            "values": {
                "N": "no grouping",
                "H": "drill-down",
                "C": "cyclic"
            },
            "type": "primitive"
        },
        "qDef": {
            "desc": "Definition of the expression in the measure.\nExample: Sum (OrderTotal)\nThis parameter is mandatory.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qNumFormat": {
            "desc": "Format of the field.\nThis parameter is optional.\n",
            "instance": "FieldAttributes",
            "type": "object"
        },
        "qRelative": {
            "desc": "If set to true, percentage values are returned instead of absolute numbers.\nThis parameter is optional. Default is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qBrutalSum": {
            "desc": "If set to true, the sum of rows total should be used rather than real expression total.\nThis parameter is optional and applies to straight tables.\nDefault is false. If using the Qlik Sense interface, it means that the total mode is set to Expression Total.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qAggrFunc": {
            "desc": "Aggregate function.\n For more information on the aggregate function syntax, see the section Working with Qlik Sense on the online help portal.\nThe default value is 0 (Sum of rows)\nThis parameter is optional.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qAccumulate": {
            "desc": "• 0 means no accumulation\n• 1 means full accumulation (each y-value accumulates all previous y-values of the expression)\n• ≥ 2 means accumulate as many steps as the qAccumulate value\nThis parameter is optional.\nDefault is 0.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qReverseSort": {
            "desc": "If set to true, it inverts the sort criteria in the field.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qActiveExpression": {
            "desc": "Index of the active expression in a cyclic measure. The indexing starts from 0.\nThis parameter is optional. The default value is 0.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qExpressions": {
            "desc": "Array of expressions. This parameter is used in case of cyclic measures (qGrouping is C). List of the expressions in the cyclic group.",
            "instance": "String",
            "type": "array"
        }
    },
    "NxInlineDimensionDef": {
        "qGrouping": {
            "desc": "Used to define a cyclic group or drill-down group.\nThis parameter is optional.\nDefault value is no grouping.\n",
            "values": {
                "N": "no grouping",
                "H": "drill-down",
                "C": "cyclic"
            },
            "type": "primitive"
        },
        "qFieldDefs": {
            "desc": "Array of field names.\nWhen creating a grouped dimension, more than one field name is defined.\nThis parameter is optional.\n",
            "instance": "String",
            "type": "array"
        },
        "qFieldLabels": {
            "desc": "Array of field labels.\nThis parameter is optional.\n",
            "instance": "String",
            "type": "array"
        },
        "qLabelExpression": {
            "desc": "Label expression.\nThis parameter is optional.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qNumberPresentations": {
            "desc": "Defines the format of the value.\nThis parameter is optional.\n",
            "instance": "FieldAttributes",
            "type": "array"
        },
        "qReverseSort": {
            "desc": "If set to true, it inverts the sort criteria in the field.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qSortCriterias": {
            "desc": "Defines the sorting criteria in the field.\nThis parameter is optional.\nDefault is to sort by alphabetical order, ascending.\n",
            "instance": "SortCriteria",
            "type": "array"
        },
        "qActiveField": {
            "desc": "Index of the active field in a cyclic dimension.\nThis parameter is optional. The default value is 0.\nThis parameter is used in case of cyclic dimensions (qGrouping is C).\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxHighlightRanges": {
        "qRanges": {
            "desc": "Ranges of highlighted values",
            "instance": "CharRange",
            "type": "array"
        }
    },
    "NxLayoutErrors": {
        "ErrorCode": {
            "desc": "Error code.",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxLibraryDimensionDef": {
        "qGrouping": {
            "desc": "Information about the grouping.",
            "values": {
                "N": "no grouping",
                "H": "drill-down",
                "C": "cyclic"
            },
            "type": "primitive"
        },
        "qFieldDefs": {
            "desc": "Array of dimension names.",
            "instance": "String",
            "type": "array"
        },
        "qFieldLabels": {
            "desc": "Array of dimension labels.",
            "instance": "String",
            "type": "array"
        }
    },
    "NxLibraryMeasureDef": {
        "qLabel": {
            "desc": "Label of the measure.",
            "instance": "String",
            "type": "primitive"
        },
        "qDef": {
            "desc": "Definition of the measure.",
            "instance": "String",
            "type": "primitive"
        },
        "qGrouping": {
            "desc": "Used to define a cyclic group or drill-down group.\nThis parameter is optional.\nDefault value is no grouping.\n",
            "values": {
                "N": "no grouping",
                "H": "drill-down",
                "C": "cyclic"
            },
            "type": "primitive"
        },
        "qExpressions": {
            "desc": "Array of expressions.",
            "instance": "String",
            "type": "array"
        },
        "qActiveExpression": {
            "desc": "Index to the active expression in a measure.",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxListObjectExpression": {
        "qExpr": {
            "desc": "Value of the expression.",
            "instance": "String",
            "type": "primitive"
        },
        "qError": {
            "desc": "This parameter is optional.\nGives information on the error.\n",
            "instance": "NxLayoutErrors",
            "type": "object"
        }
    },
    "NxListObjectExpressionDef": {
        "qExpr": {
            "desc": "Value of the expression",
            "instance": "String",
            "type": "primitive"
        },
        "qLibraryId": {
            "desc": "Refers to an expression stored in the library.",
            "instance": "String",
            "type": "primitive"
        }
    },
    "NxLocatedExpression": {
        "qInfo": {
            "desc": "Identifier and type of the object that contains the expression",
            "instance": "NxInfo",
            "type": "object"
        },
        "qTags": {
            "desc": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII\n",
            "instance": "String",
            "type": "array"
        },
        "qLocation": {
            "desc": "Location of the expression within the object",
            "instance": "String",
            "type": "primitive"
        },
        "qExpression": {
            "desc": "Value of the expression",
            "instance": "String",
            "type": "primitive"
        },
        "qParentPath": {
            "desc": "This parameter is displayed if the expression is located in a child object. The path of the parent of the child is given.\nThe format of the parent path is:\n/&lt;type of the parent&gt;:&lt;identifier of the parent&gt;\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "NxMatchingFieldInfo": {
        "qName": {
            "desc": "Name of the field",
            "instance": "String",
            "type": "primitive"
        },
        "qTags": {
            "desc": "List of tags",
            "instance": "String",
            "type": "array"
        }
    },
    "NxMeasure": {
        "qLibraryId": {
            "desc": "Refers to a measure stored in the library.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qDef": {
            "desc": "Refers to a measure stored in the hypercube.",
            "instance": "NxInlineMeasureDef",
            "type": "object"
        },
        "qSortBy": {
            "desc": "Defines the sort criteria.\nThis property is optional. The default value is sort by ascending alphabetic order.\n",
            "instance": "SortCriteria",
            "type": "object"
        },
        "qAttributeExpressions": {
            "desc": "List of attribute expressions.",
            "instance": "NxAttrExprDef",
            "type": "array"
        },
        "qCalcCond": {
            "desc": "Specifies a calculation condition, which must be fulfilled for the measure to be calculated.\nIf the calculation condition is not met, the measure is excluded from the calculation.\nThis property is optional. By default, there is no calculation condition.\n",
            "instance": "ValueExpr",
            "type": "object"
        },
        "qAttributeDimensions": {
            "desc": "List of attribute dimensions.",
            "instance": "NxAttrDimDef",
            "type": "array"
        }
    },
    "NxMeasureInfo": {
        "qFallbackTitle": {
            "desc": "Corresponds to the label of the measure.\nIf the label is not defined then the measure name is used.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qApprMaxGlyphCount": {
            "desc": "Length of the longest value in the field.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qCardinal": {
            "desc": "Number of distinct field values. ",
            "instance": "Integer",
            "type": "primitive"
        },
        "qSortIndicator": {
            "desc": "Sort indicator.\nThis parameter is optional. The default value is no sorting.\n",
            "values": {
                "N": "no sorting",
                "A": "sorting ascending",
                "D": "sorting descending"
            },
            "type": "primitive"
        },
        "qNumFormat": {
            "desc": "Format of the field.\n\nThis parameter is optional.\n",
            "instance": "FieldAttributes",
            "type": "object"
        },
        "qIsAutoFormat": {
            "desc": "This parameter is set to true if qNumFormat is set to U (unknown). The engine guesses the type of the field based on the field's expression.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qMin": {
            "desc": "Lowest value in the range.",
            "instance": "Double precision floating point",
            "type": "primitive"
        },
        "qMax": {
            "desc": "Highest value in the range.",
            "instance": "Double precision floating point",
            "type": "primitive"
        },
        "qError": {
            "desc": "This parameter is optional.\nGives information on the error.\n",
            "instance": "NxValidationError",
            "type": "object"
        },
        "qReverseSort": {
            "desc": "If set to true, it inverts the sort criteria in the field.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qAttrExprInfo": {
            "desc": "List of attribute expressions.",
            "instance": "NxAttrExprInfo",
            "type": "array"
        },
        "qAttrDimInfo": {
            "desc": "List of attribute dimensions.",
            "instance": "NxMeasureInfo",
            "type": "array"
        }
    },
    "NxMeta": {
        "qName": {
            "desc": "Name.\nThis property is optional.\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "NxMetaDef": {},
    "NxLinkedObjectInfo": {
        "qRootId": {
            "desc": "Identifier of the root object.\nIf the linked object is a child, the root identifier is the identifier of the parent.\nIf the linked object is an app object, the root identifier is the same than the identifier of the linked object since the linked object is a root object.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qInfo": {
            "desc": "Information about the linked object.",
            "instance": "NxInfo",
            "type": "object"
        }
    },
    "NxMultiRangeSelectInfo": {
        "qRange": {
            "desc": "Range of values.",
            "instance": "Range",
            "type": "object"
        },
        "qColumnsToSelect": {
            "desc": "Number of the columns to select.\nNumbering starts from 0.\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxPage": {
        "qLeft": {
            "desc": "Position from the left.\nCorresponds to the first column.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qTop": {
            "desc": "Position from the top.\nCorresponds to the first row.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qWidth": {
            "desc": "Number of columns in the page. The indexing of the columns may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef).",
            "instance": "Integer",
            "type": "primitive"
        },
        "qHeight": {
            "desc": "Number of rows or elements in the page. The indexing of the rows may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef).",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxPageTreeLevel": {
        "qLeft": {
            "desc": "The first dimension that is to be part of the tree, counted from the left. For example, if qLeft is equal to 1, omit nodes from the first dimension in the current sort order.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qDepth": {
            "desc": "Number of dimensions to include in the tree.\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxPageTreeNode": {
        "qArea": {
            "desc": "The area of the tree to be fetched. If no area is defined on a dimension, all existing nodes are included.\n",
            "instance": "Rect",
            "type": "object"
        },
        "qAllValues": {
            "desc": "When set to true, generated nodes (based on current selection) will be insertedinto the returned tree even when there is no actual value. For example, suppose you are looking for hybrid car sales at all car dealerships. Normally, only dealerships where hybrid cars are sold would be part of the returned tree but with qAllValues set to true, all available dealerships will be included regardlessif they sold any hybrid cars or not.\n",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "NxPatch": {
        "qOp": {
            "desc": "Operation to perform.",
            "values": {
                "Add": "",
                "Remove": "",
                "Replace": ""
            },
            "type": "primitive"
        },
        "qPath": {
            "desc": "Path to the property to add, remove or replace.",
            "instance": "String",
            "type": "primitive"
        },
        "qValue": {
            "desc": "This parameter is not used in a remove operation.\nCorresponds to the value of the property to add or to the new value of the property to update.\nExamples:\n\"false\", \"2\", \"\\\"New title\\\"\"\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "NxPivotPage": {
        "qLeft": {
            "desc": "Information about the left dimension values of a pivot table.",
            "instance": "NxPivotDimensionCell",
            "type": "array"
        },
        "qTop": {
            "desc": "Information about the top dimension values of a pivot table. If there is no top dimension in the pivot table, information about the measures are given.",
            "instance": "NxPivotDimensionCell",
            "type": "array"
        },
        "qData": {
            "desc": "Array of data.",
            "instance": "NxValuePoint",
            "type": "array"
        },
        "qArea": {
            "desc": "Size and offset of the data in the matrix.",
            "instance": "Rect",
            "type": "object"
        }
    },
    "NxRange": {
        "qFrom": {
            "desc": "Position in the expression of the first character of the field name.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qCount": {
            "desc": "Number of characters in the field name.\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxPivotValuePoint": {
        "qLabel": {
            "desc": "Label of the cell.\nThis parameter is optional.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qText": {
            "desc": "Some text related to the cell.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qNum": {
            "desc": "Value of the cell.",
            "instance": "Double precision floating point",
            "type": "primitive"
        },
        "qType": {
            "desc": "Type of the cell.",
            "values": {
                "V": "NX_DIM_CELL_VALUE. Applies to values in the data matrix.",
                "E": "NX_DIM_CELL_EMPTY. Applies to empty cells in the top and left dimensions.",
                "G": "NX_DIM_CELL_GENERATED. Applies to generated nodes that are inserted into the returned tree when there is no actual value (qAllValues in NxPageTreeNode set to true).",
                "N": "NX_DIM_CELL_NORMAL. Applies to left and top dimensions cells.",
                "T": "NX_DIM_CELL_TOTAL. Applies to cells marked with Total.",
                "P": "NX_DIM_CELL_PSEUDO. Applies to pseudo dimensions.",
                "R": "NX_DIM_CELL_ROOT. Applies to root node.",
                "U": "NX_DIM_CELL_NULL. Applies to Null values in the data matrix."
            },
            "type": "primitive"
        },
        "qAttrExps": {
            "desc": "Attribute expressions values.",
            "instance": "NxAttributeExpressionValues",
            "type": "object"
        }
    },
    "NxPivotDimensionCell": {
        "qText": {
            "desc": "Some text",
            "instance": "String",
            "type": "primitive"
        },
        "qElemNo": {
            "desc": "Rank number of the value\nIf set to -1, it means that the value is not an element number.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qValue": {
            "desc": "Value of the cell\nIs set to NaN, if the value is not a number.\n",
            "instance": "Double precision floating point",
            "type": "primitive"
        },
        "qCanExpand": {
            "desc": "If set to true, it means that the cell can be expanded.\nThis parameter is not returned if it is set to false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qCanCollapse": {
            "desc": "If set to true, it means that the cell can be collapsed.\nThis parameter is not returned if it is set to false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qType": {
            "desc": "Type of the cell",
            "values": {
                "V": "NX_DIM_CELL_VALUE. Applies to values in the data matrix.",
                "E": "NX_DIM_CELL_EMPTY. Applies to empty cells in the top and left dimensions.",
                "G": "NX_DIM_CELL_GENERATED. Applies to generated nodes that are inserted into the returned tree when there is no actual value (qAllValues in NxPageTreeNode set to true).",
                "N": "NX_DIM_CELL_NORMAL. Applies to left and top dimensions cells.",
                "T": "NX_DIM_CELL_TOTAL. Applies to cells marked with Total.",
                "P": "NX_DIM_CELL_PSEUDO. Applies to pseudo dimensions.",
                "R": "NX_DIM_CELL_ROOT. Applies to root node.",
                "U": "NX_DIM_CELL_NULL. Applies to Null values in the data matrix."
            },
            "type": "primitive"
        },
        "qUp": {
            "desc": "Number of elements that are part of the previous tail.\nThis number depends on the paging, more particularly it depends on the values defined in qTop and qHeight.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qDown": {
            "desc": "Number of elements that are part of the next tail.\nThis number depends on the paging, more particularly it depends on the values defined in qTop and qHeight.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qSubNodes": {
            "desc": "Information about sub nodes (or sub cells)\nThe array is empty [ ] when there is no sub nodes.\n",
            "instance": "NxPivotDimensionCell",
            "type": "array"
        },
        "qAttrExps": {
            "desc": "Information about attribute expressions.\nThe array is empty [ ] when there is no attribute expressions.\n",
            "instance": "NxAttributeExpressionValues",
            "type": "array"
        },
        "qAttrDims": {
            "desc": "Information about attribute dimensions.",
            "instance": "NxAttributeDimValues",
            "type": "array"
        }
    },
    "NxRangeSelectInfo": {
        "qRange": {
            "desc": "Range of values.",
            "instance": "Range",
            "type": "object"
        },
        "qMeasureIx": {
            "desc": "Number of the measure to select.\nNumbering starts from 0.\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxSelectionCell": {
        "qType": {
            "desc": "Type of cells to select",
            "values": {
                "D": "data",
                "T": "top dimension cells",
                "L": "left dimension cells"
            },
            "type": "primitive"
        },
        "qCol": {
            "desc": "Column index to select\nIndexing starts from 0.\nIf the cell's type is:\n\nD, the index is based on the data matrix. \nT, the index is based on the data matrix\nL, the index is based on the left dimensions indexes\n\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qRow": {
            "desc": "Row index to select\nIndexing starts from 0.\nIf the cell's type is:\n\nD, the index is based on the data matrix. \nT, the index is based on the top dimensions indexes\nL, the index is based on the data matrix\n\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxSelectionInfo": {
        "qInSelections": {
            "desc": "Is set to true if the visualization is in selection mode. \nFor more information about the selection mode, see BeginSelections method.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qMadeSelections": {
            "desc": "Is set to true if the visualization is in selection mode and if some selections have been made while in selection mode.\nFor more information about the selection mode, see BeginSelections method.\n",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "NxSimpleValue": {
        "qText": {
            "desc": "Text related to the attribute expression value.\nThis property is optional. No text is returned if the attribute expression value is a numeric.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qNum": {
            "desc": "Numeric value of the attribute expression.\nThis property is set to NaN (Not a Number) if the attribute expression value is not a numeric.\nNumerical values are not returned as text.\n",
            "instance": "Double precision floating point",
            "type": "primitive"
        }
    },
    "NxStackedPivotCell": {
        "qText": {
            "desc": "Some text.",
            "instance": "String",
            "type": "primitive"
        },
        "qElemNo": {
            "desc": "Rank number of the value.\nIf set to -1, it means that the value is not an element number.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qValue": {
            "desc": "Value of the cell.\nIs set to NaN, if the value is not a number.\n",
            "instance": "Double precision floating point",
            "type": "primitive"
        },
        "qCanExpand": {
            "desc": "If set to true, it means that the cell can be expanded.\nThis parameter isnot returned if it is set to false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qCanCollapse": {
            "desc": "If set to true, it means that the cell can be collapsed.\nThis parameter isnot returned if it is set to false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qType": {
            "desc": "Type of the cell.",
            "values": {
                "V": "NX_DIM_CELL_VALUE. Applies to values in the data matrix.",
                "E": "NX_DIM_CELL_EMPTY. Applies to empty cells in the top and left dimensions.",
                "G": "NX_DIM_CELL_GENERATED. Applies to generated nodes that are inserted into the returned tree when there is no actual value (qAllValues in NxPageTreeNode set to true).",
                "N": "NX_DIM_CELL_NORMAL. Applies to left and top dimensions cells.",
                "T": "NX_DIM_CELL_TOTAL. Applies to cells marked with Total.",
                "P": "NX_DIM_CELL_PSEUDO. Applies to pseudo dimensions.",
                "R": "NX_DIM_CELL_ROOT. Applies to root node.",
                "U": "NX_DIM_CELL_NULL. Applies to Null values in the data matrix."
            },
            "type": "primitive"
        },
        "qMaxPos": {
            "desc": "Total of the positive values in the current group of cells.",
            "instance": "Double precision floating point",
            "type": "primitive"
        },
        "qMinNeg": {
            "desc": "Total of the negative values in the current group of cells.",
            "instance": "Double precision floating point",
            "type": "primitive"
        },
        "qUp": {
            "desc": "Number of elements that are part of the previous tail.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qDown": {
            "desc": "Number of elements that are part of the next tail.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qRow": {
            "desc": "Row index in the data matrix.\nThe indexing starts from 0.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qSubNodes": {
            "desc": "Information about sub nodes (or sub cells).\nThe array is empty [ ] when there are no sub nodes.\n",
            "instance": "NxStackedPivotCell",
            "type": "array"
        },
        "qAttrExps": {
            "desc": "Attribute expressions values.",
            "instance": "NxAttributeExpressionValues",
            "type": "object"
        },
        "qAttrDims": {
            "desc": "Attribute dimensions values.",
            "instance": "NxAttributeDimValues",
            "type": "object"
        }
    },
    "NxSimpleDimValue": {
        "qText": {
            "desc": "Text related to the attribute expression value.\nThis property is optional. No text is returned if the attribute expression value is a numeric.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qElemNo": {
            "desc": "Element number.\n",
            "instance": "Int",
            "type": "primitive"
        }
    },
    "NxTickCell": {
        "qText": {
            "desc": "Tick's label.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qStart": {
            "desc": "Start value.\n",
            "instance": "Double",
            "type": "primitive"
        },
        "qEnd": {
            "desc": "End value.",
            "instance": "Double",
            "type": "primitive"
        }
    },
    "NxStreamListEntry": {
        "qName": {
            "desc": "Name of the stream\n",
            "instance": "String",
            "type": "primitive"
        },
        "qId": {
            "desc": "Identifier of the stream\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "NxStateCounts": {
        "qLocked": {
            "desc": "Number of values in locked state",
            "instance": "Integer",
            "type": "primitive"
        },
        "qSelected": {
            "desc": "Number of values in selected state",
            "instance": "Integer",
            "type": "primitive"
        },
        "qOption": {
            "desc": "Number of values in optional state",
            "instance": "Integer",
            "type": "primitive"
        },
        "qDeselected": {
            "desc": "Number of values in deselected state",
            "instance": "Integer",
            "type": "primitive"
        },
        "qAlternative": {
            "desc": "Number of values in alternative state",
            "instance": "Integer",
            "type": "primitive"
        },
        "qExcluded": {
            "desc": "Number of values in excluded state",
            "instance": "Integer",
            "type": "primitive"
        },
        "qSelectedExcluded": {
            "desc": "Number of values in selected excluded state",
            "instance": "Integer",
            "type": "primitive"
        },
        "qLockedExcluded": {
            "desc": "Number of values in locked excluded state",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxTreeNode": {
        "qText": {
            "desc": "The text version of the value, if available.",
            "instance": "String",
            "type": "primitive"
        },
        "qElemNo": {
            "desc": "Element number\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qRow": {
            "desc": "Row index in the data matrix.\nThe indexing starts from 0.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qNodeNr": {
            "desc": "A generated number applicable to this page only. Used so that children can easily identify who their parents are.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qParentNode": {
            "desc": "The qNodeNr of this node's parent for the current page.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qType": {
            "desc": "Type of the cell.",
            "values": {
                "V": "NX_DIM_CELL_VALUE. Applies to values in the data matrix.",
                "E": "NX_DIM_CELL_EMPTY. Applies to empty cells in the top and left dimensions.",
                "G": "NX_DIM_CELL_GENERATED. Applies to generated nodes that are inserted into the returned tree when there is no actual value (qAllValues in NxPageTreeNode set to true).",
                "N": "NX_DIM_CELL_NORMAL. Applies to left and top dimensions cells.",
                "T": "NX_DIM_CELL_TOTAL. Applies to cells marked with Total.",
                "P": "NX_DIM_CELL_PSEUDO. Applies to pseudo dimensions.",
                "R": "NX_DIM_CELL_ROOT. Applies to root node.",
                "U": "NX_DIM_CELL_NULL. Applies to Null values in the data matrix."
            },
            "type": "primitive"
        },
        "qValues": {
            "desc": "The measures for this node.",
            "instance": "NxTreeValue",
            "type": "array"
        },
        "qNodes": {
            "desc": "The children of this node in the tree structure.",
            "instance": "NxTreeNode",
            "type": "array"
        },
        "qAttrExps": {
            "desc": "Attribute expression values.",
            "instance": "NxAttributeExpressionValues",
            "type": "object"
        },
        "qAttrDims": {
            "desc": "Attribute dimension values.",
            "instance": "NxAttributeDimValues",
            "type": "object"
        }
    },
    "NxTreeDataOption": {
        "MaxNbrOfNodes": {
            "desc": "Maximum number of nodes in the tree. If this limit is exceeded, no nodes are returned. All nodes are counted.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "TreeNodes": {
            "desc": "Definesareas of the tree to be fetched. Areas must be defined left to right.\n",
            "instance": "NxPageTreeNode",
            "type": "array"
        },
        "TreeLevels": {
            "desc": "Filters out complete dimensions from the fetched tree.",
            "instance": "NxPageTreeLevel",
            "type": "object"
        }
    },
    "NxTreeValue": {
        "qText": {
            "desc": "The text version of the value, if available.",
            "instance": "String",
            "type": "primitive"
        },
        "qValue": {
            "desc": "Value of the cell.\nIs set to NaN, if the value is not a number.\n",
            "instance": "Double precision floating point",
            "type": "primitive"
        },
        "qAttrExps": {
            "desc": "Attribute expression values.",
            "instance": "NxAttributeExpressionValues",
            "type": "object"
        },
        "qAttrDims": {
            "desc": "Attribute dimension values.",
            "instance": "NxAttributeDimValues",
            "type": "object"
        }
    },
    "NxVariableListItem": {
        "qName": {
            "desc": "Name of the variable.",
            "instance": "String",
            "type": "primitive"
        },
        "qDescription": {
            "desc": "Description of the variable.",
            "instance": "String",
            "type": "primitive"
        },
        "qDefinition": {
            "desc": "Definition of the variable. It can be a value or an expression.",
            "instance": "String",
            "type": "primitive"
        },
        "qIsConfig": {
            "desc": "If set to true, it means that the variable is a system variable.\n A system variable provides information about the system and is set by the engine. The content cannot be changed by the user.\nThis parameter is optional.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qIsReserved": {
            "desc": "If set to true, it means that the variable is reserved.\nThis parameter is optional.\nThe default value is false.\nExamples:\n• ScriptError is a reserved variable, set by the engine.\n• DayNames is a reserved variable, set by the user.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qMeta": {
            "desc": "Information about publishing and permissions.\nThis parameter is optional.\n",
            "instance": "NxMeta",
            "type": "object"
        },
        "qInfo": {
            "desc": "Identifier and type of the object.\nThis parameter is mandatory.\n",
            "instance": "NxInfo",
            "type": "object"
        },
        "qData": {
            "desc": "Data.",
            "instance": "JSON",
            "type": "primitive"
        },
        "qIsScriptCreated": {
            "desc": "If set to true, it means that the variable was defined via script.",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "NxValidationError": {
        "qErrorCode": {
            "desc": "Error code.\nThis parameter is always displayed in case of error.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qContext": {
            "desc": "Context related to the error, from the user app domain. \nIt can be the identifier of an object, a field name, a table name.\nThis parameter is optional.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qExtendedMessage": {
            "desc": "Internal information from the server.\nThis parameter is optional.\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "NxVariableProperties": {
        "qName": {
            "desc": "Name of the variable.",
            "instance": "String",
            "type": "primitive"
        },
        "qNumberPresentation": {
            "desc": "Defines the format of the value of a variable.",
            "instance": "FieldAttributes",
            "type": "object"
        },
        "qIncludeInBookmark": {
            "desc": "Set this property to true to update the variable when applying a bookmark.\nThe value of a variable can affect the state of the selections.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qUsePredefListedValues": {
            "desc": "The value of a variable can be an enumeration.\nSet this property to true to reflect the predefined values in an enumeration.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qPreDefinedList": {
            "desc": "List of enumerations.\nThis property is used if qUsePredefListedValues is set to true.\n",
            "instance": "String",
            "type": "array"
        }
    },
    "NxViewPort": {
        "qWidth": {
            "desc": "Width of the canvas in pixels.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qHeight": {
            "desc": "Height of the canvas in pixels.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qZoomLevel": {
            "desc": "Zoom level.",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "OdbcDsn": {
        "qName": {
            "desc": "Name of the ODBC&nbsp;connection.",
            "instance": "String",
            "type": "primitive"
        },
        "qDescription": {
            "desc": "Description of the ODBC&nbsp;connection.",
            "instance": "String",
            "type": "primitive"
        },
        "qBit32": {
            "desc": "This parameter is optional. Default is false.\nIs set to true if the version of ODBC is32-bit.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qUserOnly": {
            "desc": "This parameter is optional. Default is false.\nIs set to true if the connection is User DSN. The connection works only for a specific user.\n",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "OleDbProvider": {
        "qName": {
            "desc": "Name of the OLEDB provider.",
            "instance": "String",
            "type": "primitive"
        },
        "qDescription": {
            "desc": "Description of the OLEDB provider.",
            "instance": "String",
            "type": "primitive"
        },
        "qBit32": {
            "desc": "This parameter is optional. Default is false.\nIs set to true if the version of the OLEDB provider is32-bit.\n",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "OtherTotalSpecProp": {
        "qOtherMode": {
            "desc": "Determines how many dimension values are displayed.\nThe default value is OTHER_OFF.\n",
            "values": {
                "OTHER_OFF": "do not limit the number of dimension values",
                "OTHER_COUNTED": "limit the dimension values to a specified number defined in OtherTotalSpecProp.",
                "OTHER_ABS_LIMITED": "limit the dimension values to an absolute value defined in OtherTotalSpecProp.",
                "OTHER_ABS_ACC_TARGET": "return the   dimension values that accumulate to an absolute value. All rows up to the current row are accumulated and the result is compared to the specified absolute value. The absolute value is defined in OtherTotalSpecProp.",
                "OTHER_REL_LIMITED": "limit the dimension values based on a percentage of the total. The total is the sum of all the dimension values. The percentage is defined in OtherTotalSpecProp.",
                "OTHER_REL_ACC_TARGET": "return the   dimension values that accumulate to a percentage of the total. All rows up to the current row are accumulated and the result is compared to the total of the dimension values. A percentage is calculated. This percentage is compared to the specified percentage, defined in OtherTotalSpecProp."
            },
            "type": "primitive"
        },
        "qOtherCounted": {
            "desc": "Number of values to display. The number of values can be entered as a calculated formula.\nThis parameter is used when qOtherMode is set to OTHER_COUNTED.\n",
            "instance": "<div class=\"API_syntax\">\"qv\": \"&lt;expression&gt;\"</div>\n                            <p>Where</p>\n                            <p><span class=\"API_syntax_input\">&lt;expression&gt;</span> is a string.</p>",
            "type": "primitive"
        },
        "qOtherLimit": {
            "desc": "Value used to limit the dimension values. The limit can be entered as a calculated formula.\nThis parameter is used when qOtherMode is set to:\n\nOTHER_ABS_LIMITED\nOTHER_REL_LIMITED\n\nOTHER_ABS_ACC_TARGET\nOTHER_REL_ACC_TARGET\n\n\n&nbsp;\n",
            "instance": "<div class=\"API_syntax\">\"qv\": \"&lt;expression&gt;\"</div>\n                            <p>Where</p>\n                            <p><span class=\"API_syntax_input\">&lt;expression&gt;</span> is a string.</p>",
            "type": "primitive"
        },
        "qOtherLimitMode": {
            "desc": "Sets the limit for the Others mode.\nThis parameter is used when qOtherMode is set to:\n\nOTHER_ABS_LIMITED\nOTHER_REL_LIMITED\n\nOTHER_ABS_ACC_TARGET\nOTHER_REL_ACC_TARGET\n\n\n",
            "values": {
                "OTHER_GE_LIMIT": "include the values greater or equal",
                "OTHER_LE_LIMIT": "include the values lower or equal",
                "OTHER_GT_LIMIT": "include the values strictly greater than",
                "OTHER_LT_LIMIT": "include the values strictly lower than"
            },
            "type": "primitive"
        },
        "qSuppressOther": {
            "desc": "If set to true, the group Others is not displayed as a dimension value.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qForceBadValueKeeping": {
            "desc": "This parameter is used when qOtherMode is set to:\n\nOTHER_ABS_LIMITED\nOTHER_REL_LIMITED\n\nOTHER_ABS_ACC_TARGET\nOTHER_REL_ACC_TARGET\n\n\nand when the dimension values include not numeric values.\nSet this parameter to true to include text values in the returned values. \nThe default value is true.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qApplyEvenWhenPossiblyWrongResult": {
            "desc": "Set this parameter to true to allow the calculation of Others even if the engine detects some potential mistakes. \nFor example the country Russia is part of the continent Europe and Asia. If you have an hypercube with two dimensions Country and Continent and one measure Population, the engine can detect that the population of Russia is included in both the continent Asia and Europe. \nThe default value is true.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qGlobalOtherGrouping": {
            "desc": "This parameter applies to inner dimensions. \nIf this parameter is set to true, the restrictions are calculated on the selected dimension only. All previous dimensions are ignored.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qOtherCollapseInnerDimensions": {
            "desc": "If set to true, it collapses the inner dimensions (if any) in the group Others.\nThe default value is false.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qOtherSortMode": {
            "desc": "Defines the sort order of the dimension values.\nThe default value is OTHER_SORT_DESCENDING.\n",
            "values": {
                "OTHER_SORT_DEFAULT": "sort by load order",
                "OTHER_SORT_DESCENDING": "sort by descending values",
                "OTHER_SORT_ASCENDING": "sort by ascending values"
            },
            "type": "primitive"
        },
        "qTotalMode": {
            "desc": "If set to TOTAL_EXPR, the total of the dimension values is returned.\nThe default value is TOTAL_OFF.\n",
            "values": {
                "TOTAL_OFF": "",
                "TOTAL_EXPR": ""
            },
            "type": "primitive"
        },
        "qReferencedExpression": {
            "desc": "This parameter applies when there are several measures.\nName of the measure to use for the calculation of Others for a specific dimension.\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "Point": {
        "qx": {
            "desc": "x-coordinate in pixels.\nThe origin is the top left of the screen.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qy": {
            "desc": "y-coordinate in pixels.\nThe origin is the top left of the screen.\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "NxStackPage": {
        "qData": {
            "desc": "Array of data.",
            "instance": "NxStackedPivotCell",
            "type": "array"
        },
        "qArea": {
            "desc": "Size and offset of the data in the matrix.",
            "instance": "Rect",
            "type": "object"
        }
    },
    "ProgressMessage": {
        "qMessageCode": {
            "desc": "Code number to the corresponding localized message string.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qMessageParameters": {
            "desc": "Parameters to be inserted in the localized message string.",
            "instance": "String",
            "type": "array"
        }
    },
    "Range": {
        "qMin": {
            "desc": "Lowest value in the range",
            "instance": "Double",
            "type": "primitive"
        },
        "qMax": {
            "desc": "Highest value in the range",
            "instance": "Double",
            "type": "primitive"
        },
        "qMinInclEq": {
            "desc": "If set to true, the range includes the lowest value in the range of selections (Equals to ). [bn(50500)]\nExample: \nThe range is [1,10]. If qMinInclEq is set to true it means that 1 is included in the range of selections.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qMaxInclEq": {
            "desc": "If set to true, the range includes the highest value in the range of selections (Equals to ). [bn(50500)]\nExample: \nThe range is [1,10]. If qMinInclEq is set to true it means that 10 is included in the range of selections.\n",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "RangeSelectInfo": {
        "qRangeLo": {
            "desc": "Lowest value in the range.",
            "instance": "Double",
            "type": "primitive"
        },
        "qRangeHi": {
            "desc": "Highest value in the range.",
            "instance": "Double",
            "type": "primitive"
        },
        "qMeasure": {
            "desc": "Label of the measure.",
            "instance": "String",
            "type": "primitive"
        }
    },
    "Rect": {
        "qLeft": {
            "desc": "Position from the left.\nCorresponds to the first column.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qTop": {
            "desc": "Position from the top.\nCorresponds to the first row.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qWidth": {
            "desc": "Number of columns in the page. The indexing of the columns may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef).",
            "instance": "Integer",
            "type": "primitive"
        },
        "qHeight": {
            "desc": "Number of rows or elements in the page. The indexing of the rows may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef).",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "ScriptSyntaxError": {
        "qErrLen": {
            "desc": "Length of the word where the error is located",
            "instance": "Integer",
            "type": "primitive"
        },
        "qTabIx": {
            "desc": "Number of the faulty section",
            "instance": "Integer",
            "type": "primitive"
        },
        "qLineInTab": {
            "desc": "Line number in the section where the error is located",
            "instance": "Integer",
            "type": "primitive"
        },
        "qColInLine": {
            "desc": "Position of the erroneous text from the beginning of the line",
            "instance": "Integer",
            "type": "primitive"
        },
        "qTextPos": {
            "desc": "Position of the erroneous text from the beginning of the script",
            "instance": "Integer",
            "type": "primitive"
        },
        "qSecondaryFailure": {
            "desc": "The default value is false.",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "SearchAssociationResult": {
        "qFieldNames": {
            "desc": "List of the fields that contains search associations.",
            "instance": "String",
            "type": "array"
        },
        "qSearchTerms": {
            "desc": "List of the search terms.",
            "instance": "String",
            "type": "array"
        },
        "qFieldDictionaries": {
            "desc": "Information about the fields containing search hits.",
            "instance": "SearchFieldDictionary",
            "type": "array"
        },
        "qSearchTermsMatched": {
            "desc": "List of search results.\nThe maximum number of search results in this list is set by qPage/qCount.\n",
            "instance": {},
            "type": "array"
        },
        "qTotalSearchResults": {
            "desc": "Total number of search results. \nThis number is not limited by qPage/qCount.\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "SearchCharRange": {
        "qCharPos": {
            "desc": "Starting position of the match in the search result, starting from 0.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qCharCount": {
            "desc": "Length of the match in the search result.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qTerm": {
            "desc": "Position of the term in the list of search terms, starting from 0.",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "SearchCombinationOptions": {
        "qSearchFields": {
            "desc": "List of the search fields.\nIf empty, the search is performed in all fields of the app.\n",
            "instance": "String",
            "type": "array"
        },
        "qContext": {
            "desc": "Search context.\nThe default value is LockedFieldsOnly.\n",
            "values": {
                "Cleared": "In this mode, the first step is to clear any current selections in the app. The second step is to search for one or more terms in the values of the app.",
                "LockedFieldsOnly": "In this mode, the search applies only to the values associated with the selections made in locked fields, ignoring selections in any unlocked field. If no locked fields, the behavior is identical to the Cleared context. You cannot make any new selections in a locked field. You can get search hits for the associated values of a locked field but you cannot get the search hits for the non associative values.",
                "CurrentSelections": "In this mode, the current selections are kept (if any). Search for one or more terms in the values of the app. New selections are made on top of the current selections. If no selections were made before the search, this mode is identical to the Cleared context."
            },
            "type": "primitive"
        },
        "qCharEncoding": {
            "desc": "Encoding used to compute qRanges of type SearchCharRange.\nOnly affects the computation of the ranges. It does not impact the encoding of the text.\n",
            "instance": "Utf8Utf16",
            "type": "primitive"
        },
        "qAttributes": {
            "desc": "Optional.\n\nFor SearchSuggest method, this array is empty.\nFor SearchResults method, this array is empty, or contains qNum and/or qElemNum. It allows the user to request details in the outputted SearchGroupItemMatch. For more information, see SearchGroupItemMatch\n\n",
            "instance": "String",
            "type": "array"
        }
    },
    "SearchFieldMatch": {
        "qField": {
            "desc": "Position of the field in the list of fields, starting from 0. \nThe list of fields is defined in qResults/qFieldNames and contains the search associations.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qValues": {
            "desc": "Positions of the matching values in the search results.\nThe maximum number of values in this list is defined by qMaxNbrFieldMatches.\n",
            "instance": "Integer",
            "type": "array"
        },
        "qTerms": {
            "desc": "Positions of the search terms, starting from 0.",
            "instance": "Integer",
            "type": "array"
        },
        "qNoOfMatches": {
            "desc": "Number of search hits in the field.\nThe number of values in qValues and the value of qNoOfMatches are equal if qMaxNbrFieldMatches is -1.\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "SearchFieldDictionary": {
        "qField": {
            "desc": "Position of the field in the list of fields, starting from 0. \nThe list of fields is defined in qResults/qFieldNames and contains the search associations.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qResult": {
            "desc": "List of the matching values.\nThe maximum number of values in this list is set by qMaxNbrFieldMatches.\n",
            "instance": "SearchTermResult",
            "type": "array"
        }
    },
    "SearchGroup": {
        "qId": {
            "desc": "Identifier of the search group.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qGroupType": {
            "desc": "Type of the search group.",
            "values": {
                "1": "for DatasetType: the type of the group is a data set. This group contains search matches that are related to fields in the app.",
                "2": "for GenericObjectsType: the type of the group is a generic object. This group contains search matches that are related to generic objects in the app."
            },
            "type": "primitive"
        },
        "qSearchTermsMatched": {
            "desc": "Indexes of the search terms that are included in the group. These search terms are related to the list of terms defined in SearchResult.qSearchTerms.",
            "instance": "Integer",
            "type": "array"
        },
        "qTotalNumberOfItems": {
            "desc": "Total number of distinct items in the search group.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qItems": {
            "desc": "List of items in the search group. \nThe group items are numbered from the value of SearchGroupOptions.qOffset to the value of SearchGroupOptions.qOffset + SearchGroupOptions.qCount\n",
            "instance": "SearchGroupItem",
            "type": "array"
        }
    },
    "SearchGroupItem": {
        "qItemType": {
            "desc": "Type of the group item.",
            "values": {
                "1": "for Field: the type of the search group item is a field.",
                "2": "for GenericObject: the type of the search group item is a generic object."
            },
            "type": "primitive"
        },
        "qTotalNumberOfMatches": {
            "desc": "Total number of distinct matches in the search group item.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qIdentifier": {
            "desc": "Identifier of the item. \nIt corresponds to: \n\nThe name of the field, if the type of the search group is data set. \nThe id of the generic object if the type of the search group is generic object.\n\n",
            "instance": "String",
            "type": "primitive"
        },
        "qItemMatches": {
            "desc": "List of matches in the search group item. \nThe group item matches are numbered from the value of SearchGroupItemOptions.qOffset to the value of SearchGroupItemOptions.qOffset + SearchGroupItemOptions.qCount.\n",
            "instance": "SearchGroupItemMatch",
            "type": "array"
        },
        "qSearchTermsMatched": {
            "desc": "Indexes of the search terms that are included in the group item. These search terms are related to the list of terms defined in SearchResult.qSearchTerms.\n",
            "instance": "Integer",
            "type": "array"
        }
    },
    "SearchGroupItemMatch": {
        "qText": {
            "desc": "Search match value.\nValue of the search group item.\nIf the match is found in a field, it corresponds to the value of the field.\nIf the match is found in a generic object property, it corresponds to the property value.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qAttributes": {
            "desc": "Provides detail of the match as requested by the user in SearchObjectsOptions.qAttributes or SearchCombinationOptions.qAttributes\nIf the user requests SearchObjects or SearchResults with an empty qAttributes option, the outputted qAttributes is returned empty.\nFor SearchObjects requested with qProperty, the SearchGroupItemMatch.qAttributes return value contains [“qProperty”, \"qMetaDef/title”] if the match has been found in the title of the item. For dimension values, the returned qProperty will be “*”.\nFor SearchResults requested with qNum, the SearchGroupItemMatch.qAttributes return value contains [\"qNum\", N] where N is the numeric value of the element or NaN if the value is not numeric.\nFor SearchResults requested with qElemNum, the SearchGroupItemMatch.qAttributes return value contains [\"qElemNum\", N] where N is the value index of the element.\n",
            "instance": {
                "String corresponding to SearchObjectOptions.qAttributes": ""
            },
            "type": "array"
        },
        "qRanges": {
            "desc": "List of ranges.\nFor example, if the search terms are Price and Make, and the search group item value is Make by Price vs Mileage, then there are two ranges: one for Price and one for Make.\n",
            "instance": "SearchCharRange",
            "type": "array"
        }
    },
    "SearchGroupOptions": {
        "qGroupType": {
            "desc": "Type of the group. Can be:\n\nGenericObjectType: the type of the search group item is a generic object. Groups have this type when you are calling SearchObjects.\nDatasetType: type of the search group item is a dataset association. Groups have this type when you are calling SearchResults.\n\n",
            "instance": "GenericObjectTypeDatasetType",
            "type": "primitive"
        },
        "qOffset": {
            "desc": "Position starting from 0.\nThe default value is 0.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qCount": {
            "desc": "Maximum number of items per group (in qItems[ ]).\nThe default value is -1; all values are returned.\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "SearchGroupItemOptions": {
        "qGroupItemType": {
            "desc": "Type of the group item. Can be\n\nGenericObject: the type of the search group item is a generic object. Group items have this type when you are calling SearchObjects.\nField: the type of the search group item is a field. Group items have this type when you are calling SearchResults.\n\n",
            "instance": "GenericObjectField",
            "type": "primitive"
        },
        "qOffset": {
            "desc": "Positionstarting from 0.\nThe default value is 0.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qCount": {
            "desc": "Maximum number of matches per item (in qItemMatches[ ]).\nThe default value is -1: all values are returned.\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "SearchPage": {
        "qOffset": {
            "desc": "Position from the top, starting from 0.\n\n\nIf the offset is set to 0, the first search result to be returned is at position 0.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qCount": {
            "desc": "Number of search groups to return (in qSearchGroupArray).\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qMaxNbrFieldMatches": {
            "desc": "Maximum number of matching values to return per search result.\nThe default value is -1; all values are returned.\nThis property is to be used with the SearchAssociations method.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qGroupOptions": {
            "desc": "Options of the search groups.\nIf this property is not set, all values are returned.\nThis property is to be used with the SearchResults method or the SearchObjects method.\n",
            "instance": "SearchGroupOptions",
            "type": "array"
        },
        "qGroupItemOptions": {
            "desc": "Options of the search group items.\nIf this property is not set, all values are returned.\nThis property is to be used with the SearchResults method or the SearchObjects method.\n",
            "instance": "SearchGroupItemOptions",
            "type": "array"
        }
    },
    "SearchMatchCombination": {
        "qId": {
            "desc": "Index of the search result, starting from 0.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qFieldMatches": {
            "desc": "Information about the search matches.",
            "instance": "SearchFieldMatch",
            "type": "array"
        }
    },
    "SearchResult": {
        "qSearchTerms": {
            "desc": "List of the search terms.",
            "instance": "String",
            "type": "array"
        },
        "qTotalNumberOfGroups": {
            "desc": "Total number of groups.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qSearchGroupArray": {
            "desc": "List of search groups.\nThe groups are numbered from the value of SearchPage.qOffset to the value of SearchPage.qOffset + SearchPage.qCount.\n",
            "instance": "SearchGroup",
            "type": "array"
        }
    },
    "SearchObjectOptions": {
        "qAttributes": {
            "desc": "This array is either empty or contains qProperty. \n",
            "instance": "String",
            "type": "array"
        },
        "qCharEncoding": {
            "desc": "Encoding used to compute qRanges of type SearchCharRange.\nOnly affects the computation of the ranges. It does not impact the encoding of the text.\n",
            "instance": "Utf8Utf16",
            "type": "primitive"
        }
    },
    "SearchTermResult": {
        "qText": {
            "desc": "Text of the associated value.",
            "instance": "String",
            "type": "primitive"
        },
        "qElemNumber": {
            "desc": "Element number of theassociated value.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qRanges": {
            "desc": "List of ranges.\nFor example, if the user searches the term read and the associative value is Reading, then the corresponding range would be Read in Reading.\n",
            "instance": "SearchCharRange",
            "type": "array"
        }
    },
    "SearchSuggestionResult": {
        "qSuggestions": {
            "desc": "List of suggestions.\n",
            "instance": "SearchSuggestItem",
            "type": "array"
        },
        "qFieldNames": {
            "desc": "List of field names that contain search hits.",
            "instance": "String",
            "type": "array"
        }
    },
    "SearchSuggestItem": {
        "qValue": {
            "desc": "Value of the suggestion.",
            "instance": "String",
            "type": "primitive"
        },
        "qTerm": {
            "desc": "Index of the suggestion value.\nThe indexing starts from 0 and from the left.\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "SelectionObject": {
        "BackCount": {
            "desc": "Number of steps back",
            "instance": "Integer",
            "type": "primitive"
        },
        "ForwardCount": {
            "desc": "Number of steps forward",
            "instance": "Integer",
            "type": "primitive"
        },
        "Selections": {
            "desc": "Lists the fields that are selected",
            "instance": "NxCurrentSelectionItem",
            "type": "array"
        }
    },
    "SelectInfo": {
        "qTextSearch": {
            "desc": "Text search string.\nEverything that matches the text is selected.\nThis parameter is optional.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qRangeLo ": {
            "desc": "Lower value of the search range.\nThis parameter is used when performing range selections or text searches in dimensions.\nDefault is Null.\n",
            "instance": "Double",
            "type": "primitive"
        },
        "qRangeHi ": {
            "desc": "Highest value of the search range.\nThis parameter is used when performing range selections or text searches in dimensions.\nDefault is Null.\n",
            "instance": "Double",
            "type": "primitive"
        },
        "qNumberFormat": {
            "desc": "Gives information about the formatting of the range.\nThis parameter is used when performing range selections or text searches in dimensions.\n",
            "instance": "FieldAttributes",
            "type": "object"
        },
        "qRangeInfo": {
            "desc": "This parameter is used when performing range selections or text searches in measures.\nGives information about the range of selections.\nbool SoftLock = false;\n",
            "instance": "RangeSelectInfo",
            "type": "array"
        },
        "qContinuousRangeInfo": {
            "desc": "List of information about ranges for selections.",
            "instance": "Range",
            "type": "array"
        }
    },
    "SelectionObjectDef": {},
    "SortCriteria": {
        "qSortByState": {
            "desc": "Sorts the field values according to their logical state (selected, optional, alternative or excluded).",
            "values": {
                "0": "for no sorting",
                "1": "for sorting ascending",
                "-1": "for sorting descending"
            },
            "type": "primitive"
        },
        "qSortByFrequency": {
            "desc": "Sorts the field values by frequency (number of occurrences in the field).",
            "values": {
                "0": "for no sorting",
                "1": "for sorting descending",
                "-1": "for sorting ascending"
            },
            "type": "primitive"
        },
        "qSortByNumeric": {
            "desc": "Sorts the field values by numeric value.",
            "values": {
                "0": "for no sorting",
                "1": "for sorting ascending",
                "-1": "for sorting descending"
            },
            "type": "primitive"
        },
        "qSortByAscii": {
            "desc": "Sorts the field by alphabetical order.",
            "values": {
                "0": "for no sorting",
                "1": "for sorting ascending",
                "-1": "for sorting descending"
            },
            "type": "primitive"
        },
        "qSortByLoadOrder": {
            "desc": "Sorts the field values by the initial load order.",
            "values": {
                "0": "for no sorting",
                "1": "for sorting ascending",
                "-1": "for sorting descending"
            },
            "type": "primitive"
        },
        "qSortByExpression": {
            "desc": "Sorts the field by expression.",
            "values": {
                "0": "for no sorting",
                "1": "for sorting ascending",
                "-1": "for sorting descending"
            },
            "type": "primitive"
        },
        "qExpression": {
            "desc": "Sort by expression.\n",
            "instance": "<div class=\"API_syntax\">\"qv\": \"&lt;expression&gt;\"</div>\n                            <p>Where</p>\n                            <p><span class=\"API_syntax_input\">&lt;expression&gt;</span> is a string.</p>",
            "type": "primitive"
        }
    },
    "Size": {
        "qcx": {
            "desc": "Number of pixels on the x axis.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qcy": {
            "desc": "Number of pixels on the y axis.\n",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "SourceKeyRecord": {
        "qKeyFields": {
            "desc": "Name of the key field.",
            "instance": "String",
            "type": "array"
        },
        "qTables": {
            "desc": "Table the key belongs to.",
            "instance": "String",
            "type": "array"
        }
    },
    "StaticContentList": {
        "qItems": {
            "desc": "Information about the list of content files.\n",
            "instance": "StaticContentListItem",
            "type": "object"
        }
    },
    "StaticContentListItem": {
        "qUrlDef": {
            "desc": "Relative path to the content file. The URL is static.\nIn Qlik Sense Enterprise, content files located:\n• in the /content/&lt;content library name&gt;/ folder are part of a global content library.\n• in the /appcontent/ folder are part of the app specific library.\nThe content files are never embedded in the qvf file.\nIn Qlik Sense Desktop, content files located:\n• in the /content/default/ folder are outside the qvf file.\n• in the/media/ folder are embedded in the qvf file.\n",
            "instance": "String",
            "type": "primitive"
        },
        "qUrl": {
            "desc": "Relative path to the content file. The URL is static.\nIn Qlik Sense Enterprise, content files located:\n• in the /content/&lt;content library name&gt;/ folder are part of a global content library.\n• in the /appcontent/ folder are part of the app specific library.\nThe content files are never embedded in the qvf file.\nIn Qlik Sense Desktop, content files located:\n• in the /content/default/ folder are outside the qvf file.\n• in the/media/ folder are embedded in the qvf file.\n",
            "instance": "String",
            "type": "primitive"
        }
    },
    "StaticContentUrl": {
        "qUrl": {
            "desc": "Relative path of the thumbnail.",
            "instance": "String",
            "type": "primitive"
        }
    },
    "StringExpression": {},
    "TableRecord": {
        "qName": {
            "desc": "Name of the table.",
            "instance": "String",
            "type": "primitive"
        },
        "qLoose": {
            "desc": "This property is set to true if the table is loose. ",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qNoOfRows": {
            "desc": "Number of rows in the table.",
            "instance": "Integer",
            "type": "primitive"
        },
        "qFields": {
            "desc": "Information about the fields in the table.",
            "instance": "FieldInTableData",
            "type": "array"
        },
        "qPos": {
            "desc": "Information about the position of the table.",
            "instance": "Point",
            "type": "object"
        },
        "qComment": {
            "desc": "Comment related to the table.",
            "instance": "String",
            "type": "primitive"
        },
        "qIsDirectDiscovery": {
            "desc": "If set to true, Direct Discovery is used. \nDirect Discovery fields are not loaded into memory and remain in the external database.\n",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qIsSynthetic": {
            "desc": "This property is set to true if the table contains a synthetic key.",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "StaticContentUrlDef": {
        "qUrl": {
            "desc": "Relative path of the thumbnail.",
            "instance": "String",
            "type": "primitive"
        }
    },
    "TableRow": {
        "qValue": {
            "desc": "Array of field values.\n",
            "instance": "FieldValue",
            "type": "array"
        }
    },
    "TableViewBroomPointSaveInfo": {
        "qPos": {
            "desc": "Information about the position of the broom point.",
            "instance": "Point",
            "type": "object"
        },
        "qTable": {
            "desc": "Name of the table.",
            "instance": "String",
            "type": "primitive"
        },
        "qFields": {
            "desc": "List of fields in the table.",
            "instance": "String",
            "type": "array"
        }
    },
    "TableViewConnectionPointSaveInfo": {
        "qPos": {
            "desc": "Information about the position of the connection point.",
            "instance": "Point",
            "type": "object"
        },
        "qFields": {
            "desc": "List of the fields in the table.",
            "instance": "String",
            "type": "array"
        }
    },
    "TableViewCtlSaveInfo": {
        "qInternalView": {
            "desc": "Internal view mode.\n",
            "instance": "TableViewSaveInfo",
            "type": "object"
        },
        "qSourceView": {
            "desc": "Source view mode.",
            "instance": "TableViewSaveInfo",
            "type": "object"
        }
    },
    "TableViewDlgSaveInfo": {
        "qPos": {
            "desc": "Information about the position of the dialog window.\nNot used in Qlik Sense.\n",
            "instance": "Rect",
            "type": "object"
        },
        "qCtlInfo": {
            "desc": "Set of data for internal and source view modes.",
            "instance": "TableViewCtlSaveInfo",
            "type": "object"
        },
        "qMode": {
            "desc": "View mode to display when opening Qlik Sense data model viewer.\nOne of:\n\n0 for internal view mode\n1 for source view mode\n\n",
            "values": {
                "0": "internal view mode",
                "1": "source view mode"
            },
            "type": "primitive"
        }
    },
    "TableViewSaveInfo": {
        "qTables": {
            "desc": "List of the tables in the database model viewer.\n",
            "instance": "TableViewTableWinSaveInfo",
            "type": "array"
        },
        "qBroomPoints": {
            "desc": "List of the broom points in the database model viewer.\nNot used in Qlik Sense.\n",
            "instance": "TableViewBroomPointSaveInfo",
            "type": "array"
        },
        "qConnectionPoints": {
            "desc": "List of connection points in the database model viewer.\nNot used in Qlik Sense.\n",
            "instance": "TableViewConnectionPointSaveInfo",
            "type": "array"
        },
        "qZoomFactor": {
            "desc": "Zoom factor in the database model viewer.\nThe default value is 1.0.\n",
            "instance": "Double",
            "type": "primitive"
        }
    },
    "TableViewTableWinSaveInfo": {
        "qPos": {
            "desc": "Information about the position of the table.",
            "instance": "Rect",
            "type": "object"
        },
        "qCaption": {
            "desc": "Table name.",
            "instance": "String",
            "type": "primitive"
        }
    },
    "UndoInfo": {
        "qUndoCount": {
            "desc": "Number of possible undos",
            "instance": "Integer",
            "type": "primitive"
        },
        "qRedoCount": {
            "desc": "Number of possible redos",
            "instance": "Integer",
            "type": "primitive"
        }
    },
    "UndoInfoDef": {},
    "TextMacro": {
        "qTag": {
            "desc": "Name of the variable.",
            "instance": "String",
            "type": "primitive"
        },
        "qRefSeqNo": {
            "desc": "Order in which the variable was referenced during the script execution. \nThe same number sequence is used for both qRefSeqNo and qSetSeqNo.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qSetSeqNo": {
            "desc": "Order in which the variable was updated during the script execution. \nThe same number sequence is used for both qRefSeqNo and qSetSeqNo.\n",
            "instance": "Integer",
            "type": "primitive"
        },
        "qDisplayString": {
            "desc": "Variable value.",
            "instance": "String",
            "type": "primitive"
        },
        "qIsSystem": {
            "desc": "Is set to true if the variable is a system variable.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qIsReserved": {
            "desc": "Is set to true if the variable is a reserved variable.",
            "instance": "Boolean",
            "type": "primitive"
        }
    },
    "ValueExpr": {},
    "ValueExpression": {},
    "VariableList": {
        "qItems": {
            "desc": "List of the variables.",
            "instance": "NxVariableListItem",
            "type": "object"
        }
    },
    "VariableListDef": {
        "qType": {
            "desc": "Type of the list.",
            "instance": "String",
            "type": "primitive"
        },
        "qShowReserved": {
            "desc": "Shows the reserved variables if set to true.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qShowConfig": {
            "desc": "Shows the system variables if set to true.",
            "instance": "Boolean",
            "type": "primitive"
        },
        "qData": {
            "desc": "Data",
            "instance": "JSON",
            "type": "primitive"
        }
    }
}